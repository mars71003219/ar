nohup: ignoring input
08/26 06:14:57 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.14 (main, May  6 2024, 19:42:50) [GCC 11.2.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 42
    GPU 0,1: NVIDIA RTX A5000
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 12.1, V12.1.105
    GCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
    PyTorch: 2.3.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.3.6 (Git Hash 86e6af5974177e513fd3fee58425e1063e7f1361)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 8.9.2
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=8.9.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.3.1, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

    TorchVision: 0.18.1
    OpenCV: 4.10.0
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 42
    deterministic: False
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

08/26 06:14:57 - mmengine - INFO - Config:
ann_file = 'data/skeleton/ntu60_2d.pkl'
ann_file_test = '/workspace/recognizer/output/RWF-2000/stage3_dataset/unknown_s0.2_n0.65_bytetrack_h0.3_l0.1_t0.2_split0.7-0.2-0.1/test.pkl'
ann_file_train = '/workspace/recognizer/output/RWF-2000/stage3_dataset/unknown_s0.2_n0.65_bytetrack_h0.3_l0.1_t0.2_split0.7-0.2-0.1/train.pkl'
ann_file_val = '/workspace/recognizer/output/RWF-2000/stage3_dataset/unknown_s0.2_n0.65_bytetrack_h0.3_l0.1_t0.2_split0.7-0.2-0.1/val.pkl'
auto_scale_lr = dict(base_batch_size=128, enable=True)
data_root = '/workspace/recognizer/test_data'
dataset_type = 'PoseDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=5, max_keep_ckpts=5, save_best='auto', type='CheckpointHook'),
    logger=dict(ignore_last=False, interval=20, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    runtime_info=dict(type='RuntimeInfoHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    sync_buffers=dict(type='SyncBuffersHook'),
    timer=dict(type='IterTimerHook'))
default_scope = 'mmaction'
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = '/workspace/mmaction2/checkpoints/stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-2d_20221228-cd11a691.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=20)
model = dict(
    backbone=dict(
        base_channels=48,
        down_stages=[
            3,
            5,
        ],
        gcn_adaptive='init',
        gcn_with_res=True,
        graph_cfg=dict(layout='coco', mode='spatial'),
        inflate_stages=[
            3,
            5,
        ],
        num_stages=6,
        tcn_type='mstcn',
        type='STGCN'),
    cls_head=dict(
        dropout=0.5,
        in_channels=192,
        loss_cls=dict(class_weight=[
            1.0,
            1.5,
        ], type='CrossEntropyLoss'),
        num_classes=2,
        type='GCNHead'),
    type='RecognizerGCN')
optim_wrapper = dict(
    clip_grad=dict(max_norm=1.0, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=1e-05,
        type='AdamW',
        weight_decay=0.005),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0,
        by_epoch=True,
        convert_to_iter_based=True,
        end=5,
        start_factor=0.01,
        type='LinearLR'),
    dict(
        T_max=10,
        begin=5,
        by_epoch=True,
        eta_min_ratio=0.001,
        type='CosineAnnealingLR'),
]
randomness = dict(deterministic=False, seed=42)
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=16,
    dataset=dict(
        ann_file=
        '/workspace/recognizer/output/RWF-2000/stage3_dataset/unknown_s0.2_n0.65_bytetrack_h0.3_l0.1_t0.2_split0.7-0.2-0.1/val.pkl',
        pipeline=[
            dict(type='PreNormalize2D'),
            dict(dataset='coco', feats=[
                'b',
            ], type='GenSkeFeat'),
            dict(
                clip_len=100,
                num_clips=1,
                test_mode=True,
                type='UniformSampleFrames'),
            dict(type='PoseDecode'),
            dict(num_person=4, type='FormatGCNInput'),
            dict(type='PackActionInputs'),
        ],
        test_mode=True,
        type='PoseDataset'),
    num_workers=8,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = [
    dict(
        metric_options=dict(
            mean_class_accuracy=dict(), top_k_accuracy=dict(topk=(1, ))),
        type='AccMetric'),
]
test_pipeline = [
    dict(type='PreNormalize2D'),
    dict(dataset='coco', feats=[
        'b',
    ], type='GenSkeFeat'),
    dict(
        clip_len=100, num_clips=1, test_mode=True, type='UniformSampleFrames'),
    dict(type='PoseDecode'),
    dict(num_person=4, type='FormatGCNInput'),
    dict(type='PackActionInputs'),
]
train_cfg = dict(
    max_epochs=15, type='EpochBasedTrainLoop', val_begin=1, val_interval=1)
train_dataloader = dict(
    batch_size=16,
    dataset=dict(
        ann_file=
        '/workspace/recognizer/output/RWF-2000/stage3_dataset/unknown_s0.2_n0.65_bytetrack_h0.3_l0.1_t0.2_split0.7-0.2-0.1/train.pkl',
        pipeline=[
            dict(type='PreNormalize2D'),
            dict(dataset='coco', feats=[
                'b',
            ], type='GenSkeFeat'),
            dict(clip_len=100, type='UniformSampleFrames'),
            dict(type='PoseDecode'),
            dict(num_person=4, type='FormatGCNInput'),
            dict(type='PackActionInputs'),
        ],
        test_mode=False,
        type='PoseDataset'),
    num_workers=8,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(type='PreNormalize2D'),
    dict(dataset='coco', feats=[
        'b',
    ], type='GenSkeFeat'),
    dict(clip_len=100, type='UniformSampleFrames'),
    dict(type='PoseDecode'),
    dict(num_person=4, type='FormatGCNInput'),
    dict(type='PackActionInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=16,
    dataset=dict(
        ann_file=
        '/workspace/recognizer/output/RWF-2000/stage3_dataset/unknown_s0.2_n0.65_bytetrack_h0.3_l0.1_t0.2_split0.7-0.2-0.1/val.pkl',
        pipeline=[
            dict(type='PreNormalize2D'),
            dict(dataset='coco', feats=[
                'b',
            ], type='GenSkeFeat'),
            dict(
                clip_len=100,
                num_clips=1,
                test_mode=True,
                type='UniformSampleFrames'),
            dict(type='PoseDecode'),
            dict(num_person=4, type='FormatGCNInput'),
            dict(type='PackActionInputs'),
        ],
        test_mode=True,
        type='PoseDataset'),
    num_workers=8,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = [
    dict(
        metric_options=dict(
            mean_class_accuracy=dict(), top_k_accuracy=dict(topk=(1, ))),
        type='AccMetric'),
]
val_pipeline = [
    dict(type='PreNormalize2D'),
    dict(dataset='coco', feats=[
        'b',
    ], type='GenSkeFeat'),
    dict(
        clip_len=100, num_clips=1, test_mode=True, type='UniformSampleFrames'),
    dict(type='PoseDecode'),
    dict(num_person=4, type='FormatGCNInput'),
    dict(type='PackActionInputs'),
]
vis_backends = [
    dict(type='LocalVisBackend'),
    dict(type='TensorboardVisBackend'),
]
visualizer = dict(
    type='ActionVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
        dict(type='TensorboardVisBackend'),
    ])
work_dir = '/workspace/mmaction2/work_dirs/stgcnpp-bone-ntu60_rtmo-l_RWF2000plus_stable'

08/26 06:14:58 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
08/26 06:14:58 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SyncBuffersHook                    
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SyncBuffersHook                    
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
08/26 06:14:59 - mmengine - INFO - 3985 videos remain after valid thresholding
08/26 06:14:59 - mmengine - INFO - LR is set based on batch size of 128 and the current batch size is 16. Scaling the original LR by 0.125.
08/26 06:14:59 - mmengine - INFO - 1138 videos remain after valid thresholding
Loads checkpoint by local backend from path: /workspace/mmaction2/checkpoints/stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-2d_20221228-cd11a691.pth
The model and loaded state dict do not match exactly

size mismatch for backbone.gcn.0.gcn.bn.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.0.gcn.bn.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.0.gcn.bn.running_mean: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.0.gcn.bn.running_var: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.0.gcn.conv.weight: copying a param with shape torch.Size([192, 3, 1, 1]) from checkpoint, the shape in current model is torch.Size([144, 3, 1, 1]).
size mismatch for backbone.gcn.0.gcn.conv.bias: copying a param with shape torch.Size([192]) from checkpoint, the shape in current model is torch.Size([144]).
size mismatch for backbone.gcn.0.gcn.down.0.weight: copying a param with shape torch.Size([64, 3, 1, 1]) from checkpoint, the shape in current model is torch.Size([48, 3, 1, 1]).
size mismatch for backbone.gcn.0.gcn.down.0.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.0.gcn.down.1.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.0.gcn.down.1.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.0.gcn.down.1.running_mean: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.0.gcn.down.1.running_var: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.0.tcn.branches.0.0.weight: copying a param with shape torch.Size([14, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([8, 48, 1, 1]).
size mismatch for backbone.gcn.0.tcn.branches.0.0.bias: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.0.1.weight: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.0.1.bias: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.0.1.running_mean: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.0.1.running_var: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.0.3.conv.weight: copying a param with shape torch.Size([14, 14, 3, 1]) from checkpoint, the shape in current model is torch.Size([8, 8, 3, 1]).
size mismatch for backbone.gcn.0.tcn.branches.0.3.conv.bias: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.1.0.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([8, 48, 1, 1]).
size mismatch for backbone.gcn.0.tcn.branches.1.0.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.1.1.weight: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.1.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.1.1.running_mean: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.1.1.running_var: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.1.3.conv.weight: copying a param with shape torch.Size([10, 10, 3, 1]) from checkpoint, the shape in current model is torch.Size([8, 8, 3, 1]).
size mismatch for backbone.gcn.0.tcn.branches.1.3.conv.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.2.0.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([8, 48, 1, 1]).
size mismatch for backbone.gcn.0.tcn.branches.2.0.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.2.1.weight: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.2.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.2.1.running_mean: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.2.1.running_var: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.2.3.conv.weight: copying a param with shape torch.Size([10, 10, 3, 1]) from checkpoint, the shape in current model is torch.Size([8, 8, 3, 1]).
size mismatch for backbone.gcn.0.tcn.branches.2.3.conv.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.3.0.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([8, 48, 1, 1]).
size mismatch for backbone.gcn.0.tcn.branches.3.0.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.3.1.weight: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.3.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.3.1.running_mean: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.3.1.running_var: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.3.3.conv.weight: copying a param with shape torch.Size([10, 10, 3, 1]) from checkpoint, the shape in current model is torch.Size([8, 8, 3, 1]).
size mismatch for backbone.gcn.0.tcn.branches.3.3.conv.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.4.0.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([8, 48, 1, 1]).
size mismatch for backbone.gcn.0.tcn.branches.4.0.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.4.1.weight: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.4.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.4.1.running_mean: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.4.1.running_var: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.5.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([8, 48, 1, 1]).
size mismatch for backbone.gcn.0.tcn.branches.5.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.transform.0.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.0.tcn.transform.0.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.0.tcn.transform.0.running_mean: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.0.tcn.transform.0.running_var: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.0.tcn.transform.2.weight: copying a param with shape torch.Size([64, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([48, 48, 1, 1]).
size mismatch for backbone.gcn.0.tcn.transform.2.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.0.tcn.bn.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.0.tcn.bn.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.0.tcn.bn.running_mean: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.0.tcn.bn.running_var: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.1.gcn.bn.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.1.gcn.bn.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.1.gcn.bn.running_mean: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.1.gcn.bn.running_var: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.1.gcn.conv.weight: copying a param with shape torch.Size([192, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([144, 48, 1, 1]).
size mismatch for backbone.gcn.1.gcn.conv.bias: copying a param with shape torch.Size([192]) from checkpoint, the shape in current model is torch.Size([144]).
size mismatch for backbone.gcn.1.tcn.branches.0.0.weight: copying a param with shape torch.Size([14, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([8, 48, 1, 1]).
size mismatch for backbone.gcn.1.tcn.branches.0.0.bias: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.0.1.weight: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.0.1.bias: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.0.1.running_mean: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.0.1.running_var: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.0.3.conv.weight: copying a param with shape torch.Size([14, 14, 3, 1]) from checkpoint, the shape in current model is torch.Size([8, 8, 3, 1]).
size mismatch for backbone.gcn.1.tcn.branches.0.3.conv.bias: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.1.0.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([8, 48, 1, 1]).
size mismatch for backbone.gcn.1.tcn.branches.1.0.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.1.1.weight: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.1.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.1.1.running_mean: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.1.1.running_var: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.1.3.conv.weight: copying a param with shape torch.Size([10, 10, 3, 1]) from checkpoint, the shape in current model is torch.Size([8, 8, 3, 1]).
size mismatch for backbone.gcn.1.tcn.branches.1.3.conv.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.2.0.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([8, 48, 1, 1]).
size mismatch for backbone.gcn.1.tcn.branches.2.0.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.2.1.weight: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.2.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.2.1.running_mean: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.2.1.running_var: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.2.3.conv.weight: copying a param with shape torch.Size([10, 10, 3, 1]) from checkpoint, the shape in current model is torch.Size([8, 8, 3, 1]).
size mismatch for backbone.gcn.1.tcn.branches.2.3.conv.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.3.0.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([8, 48, 1, 1]).
size mismatch for backbone.gcn.1.tcn.branches.3.0.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.3.1.weight: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.3.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.3.1.running_mean: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.3.1.running_var: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.3.3.conv.weight: copying a param with shape torch.Size([10, 10, 3, 1]) from checkpoint, the shape in current model is torch.Size([8, 8, 3, 1]).
size mismatch for backbone.gcn.1.tcn.branches.3.3.conv.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.4.0.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([8, 48, 1, 1]).
size mismatch for backbone.gcn.1.tcn.branches.4.0.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.4.1.weight: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.4.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.4.1.running_mean: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.4.1.running_var: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.5.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([8, 48, 1, 1]).
size mismatch for backbone.gcn.1.tcn.branches.5.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.transform.0.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.1.tcn.transform.0.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.1.tcn.transform.0.running_mean: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.1.tcn.transform.0.running_var: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.1.tcn.transform.2.weight: copying a param with shape torch.Size([64, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([48, 48, 1, 1]).
size mismatch for backbone.gcn.1.tcn.transform.2.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.1.tcn.bn.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.1.tcn.bn.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.1.tcn.bn.running_mean: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.1.tcn.bn.running_var: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.2.gcn.bn.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.2.gcn.bn.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.2.gcn.bn.running_mean: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.2.gcn.bn.running_var: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.2.gcn.conv.weight: copying a param with shape torch.Size([192, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([288, 48, 1, 1]).
size mismatch for backbone.gcn.2.gcn.conv.bias: copying a param with shape torch.Size([192]) from checkpoint, the shape in current model is torch.Size([288]).
size mismatch for backbone.gcn.2.tcn.branches.0.0.weight: copying a param with shape torch.Size([14, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([16, 96, 1, 1]).
size mismatch for backbone.gcn.2.tcn.branches.0.0.bias: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.0.1.weight: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.0.1.bias: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.0.1.running_mean: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.0.1.running_var: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.0.3.conv.weight: copying a param with shape torch.Size([14, 14, 3, 1]) from checkpoint, the shape in current model is torch.Size([16, 16, 3, 1]).
size mismatch for backbone.gcn.2.tcn.branches.0.3.conv.bias: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.1.0.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([16, 96, 1, 1]).
size mismatch for backbone.gcn.2.tcn.branches.1.0.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.1.1.weight: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.1.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.1.1.running_mean: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.1.1.running_var: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.1.3.conv.weight: copying a param with shape torch.Size([10, 10, 3, 1]) from checkpoint, the shape in current model is torch.Size([16, 16, 3, 1]).
size mismatch for backbone.gcn.2.tcn.branches.1.3.conv.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.2.0.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([16, 96, 1, 1]).
size mismatch for backbone.gcn.2.tcn.branches.2.0.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.2.1.weight: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.2.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.2.1.running_mean: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.2.1.running_var: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.2.3.conv.weight: copying a param with shape torch.Size([10, 10, 3, 1]) from checkpoint, the shape in current model is torch.Size([16, 16, 3, 1]).
size mismatch for backbone.gcn.2.tcn.branches.2.3.conv.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.3.0.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([16, 96, 1, 1]).
size mismatch for backbone.gcn.2.tcn.branches.3.0.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.3.1.weight: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.3.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.3.1.running_mean: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.3.1.running_var: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.3.3.conv.weight: copying a param with shape torch.Size([10, 10, 3, 1]) from checkpoint, the shape in current model is torch.Size([16, 16, 3, 1]).
size mismatch for backbone.gcn.2.tcn.branches.3.3.conv.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.4.0.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([16, 96, 1, 1]).
size mismatch for backbone.gcn.2.tcn.branches.4.0.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.4.1.weight: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.4.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.4.1.running_mean: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.4.1.running_var: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.5.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([16, 96, 1, 1]).
size mismatch for backbone.gcn.2.tcn.branches.5.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.transform.0.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.2.tcn.transform.0.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.2.tcn.transform.0.running_mean: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.2.tcn.transform.0.running_var: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.2.tcn.transform.2.weight: copying a param with shape torch.Size([64, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([96, 96, 1, 1]).
size mismatch for backbone.gcn.2.tcn.transform.2.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.2.tcn.bn.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.2.tcn.bn.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.2.tcn.bn.running_mean: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.2.tcn.bn.running_var: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.3.gcn.bn.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.3.gcn.bn.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.3.gcn.bn.running_mean: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.3.gcn.bn.running_var: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.3.gcn.conv.weight: copying a param with shape torch.Size([192, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([288, 96, 1, 1]).
size mismatch for backbone.gcn.3.gcn.conv.bias: copying a param with shape torch.Size([192]) from checkpoint, the shape in current model is torch.Size([288]).
size mismatch for backbone.gcn.3.tcn.branches.0.0.weight: copying a param with shape torch.Size([14, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([16, 96, 1, 1]).
size mismatch for backbone.gcn.3.tcn.branches.0.0.bias: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.0.1.weight: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.0.1.bias: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.0.1.running_mean: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.0.1.running_var: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.0.3.conv.weight: copying a param with shape torch.Size([14, 14, 3, 1]) from checkpoint, the shape in current model is torch.Size([16, 16, 3, 1]).
size mismatch for backbone.gcn.3.tcn.branches.0.3.conv.bias: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.1.0.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([16, 96, 1, 1]).
size mismatch for backbone.gcn.3.tcn.branches.1.0.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.1.1.weight: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.1.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.1.1.running_mean: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.1.1.running_var: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.1.3.conv.weight: copying a param with shape torch.Size([10, 10, 3, 1]) from checkpoint, the shape in current model is torch.Size([16, 16, 3, 1]).
size mismatch for backbone.gcn.3.tcn.branches.1.3.conv.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.2.0.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([16, 96, 1, 1]).
size mismatch for backbone.gcn.3.tcn.branches.2.0.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.2.1.weight: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.2.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.2.1.running_mean: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.2.1.running_var: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.2.3.conv.weight: copying a param with shape torch.Size([10, 10, 3, 1]) from checkpoint, the shape in current model is torch.Size([16, 16, 3, 1]).
size mismatch for backbone.gcn.3.tcn.branches.2.3.conv.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.3.0.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([16, 96, 1, 1]).
size mismatch for backbone.gcn.3.tcn.branches.3.0.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.3.1.weight: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.3.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.3.1.running_mean: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.3.1.running_var: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.3.3.conv.weight: copying a param with shape torch.Size([10, 10, 3, 1]) from checkpoint, the shape in current model is torch.Size([16, 16, 3, 1]).
size mismatch for backbone.gcn.3.tcn.branches.3.3.conv.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.4.0.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([16, 96, 1, 1]).
size mismatch for backbone.gcn.3.tcn.branches.4.0.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.4.1.weight: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.4.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.4.1.running_mean: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.4.1.running_var: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.5.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([16, 96, 1, 1]).
size mismatch for backbone.gcn.3.tcn.branches.5.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.transform.0.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.3.tcn.transform.0.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.3.tcn.transform.0.running_mean: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.3.tcn.transform.0.running_var: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.3.tcn.transform.2.weight: copying a param with shape torch.Size([64, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([96, 96, 1, 1]).
size mismatch for backbone.gcn.3.tcn.transform.2.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.3.tcn.bn.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.3.tcn.bn.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.3.tcn.bn.running_mean: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.3.tcn.bn.running_var: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.4.gcn.bn.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.gcn.bn.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.gcn.bn.running_mean: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.gcn.bn.running_var: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.gcn.conv.weight: copying a param with shape torch.Size([384, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([576, 96, 1, 1]).
size mismatch for backbone.gcn.4.gcn.conv.bias: copying a param with shape torch.Size([384]) from checkpoint, the shape in current model is torch.Size([576]).
size mismatch for backbone.gcn.4.gcn.down.0.weight: copying a param with shape torch.Size([128, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([192, 96, 1, 1]).
size mismatch for backbone.gcn.4.gcn.down.0.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.gcn.down.1.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.gcn.down.1.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.gcn.down.1.running_mean: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.gcn.down.1.running_var: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.tcn.branches.0.0.weight: copying a param with shape torch.Size([23, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([32, 192, 1, 1]).
size mismatch for backbone.gcn.4.tcn.branches.0.0.bias: copying a param with shape torch.Size([23]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.0.1.weight: copying a param with shape torch.Size([23]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.0.1.bias: copying a param with shape torch.Size([23]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.0.1.running_mean: copying a param with shape torch.Size([23]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.0.1.running_var: copying a param with shape torch.Size([23]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.0.3.conv.weight: copying a param with shape torch.Size([23, 23, 3, 1]) from checkpoint, the shape in current model is torch.Size([32, 32, 3, 1]).
size mismatch for backbone.gcn.4.tcn.branches.0.3.conv.bias: copying a param with shape torch.Size([23]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.1.0.weight: copying a param with shape torch.Size([21, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([32, 192, 1, 1]).
size mismatch for backbone.gcn.4.tcn.branches.1.0.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.1.1.weight: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.1.1.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.1.1.running_mean: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.1.1.running_var: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.1.3.conv.weight: copying a param with shape torch.Size([21, 21, 3, 1]) from checkpoint, the shape in current model is torch.Size([32, 32, 3, 1]).
size mismatch for backbone.gcn.4.tcn.branches.1.3.conv.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.2.0.weight: copying a param with shape torch.Size([21, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([32, 192, 1, 1]).
size mismatch for backbone.gcn.4.tcn.branches.2.0.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.2.1.weight: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.2.1.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.2.1.running_mean: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.2.1.running_var: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.2.3.conv.weight: copying a param with shape torch.Size([21, 21, 3, 1]) from checkpoint, the shape in current model is torch.Size([32, 32, 3, 1]).
size mismatch for backbone.gcn.4.tcn.branches.2.3.conv.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.3.0.weight: copying a param with shape torch.Size([21, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([32, 192, 1, 1]).
size mismatch for backbone.gcn.4.tcn.branches.3.0.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.3.1.weight: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.3.1.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.3.1.running_mean: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.3.1.running_var: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.3.3.conv.weight: copying a param with shape torch.Size([21, 21, 3, 1]) from checkpoint, the shape in current model is torch.Size([32, 32, 3, 1]).
size mismatch for backbone.gcn.4.tcn.branches.3.3.conv.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.4.0.weight: copying a param with shape torch.Size([21, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([32, 192, 1, 1]).
size mismatch for backbone.gcn.4.tcn.branches.4.0.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.4.1.weight: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.4.1.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.4.1.running_mean: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.4.1.running_var: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.5.weight: copying a param with shape torch.Size([21, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([32, 192, 1, 1]).
size mismatch for backbone.gcn.4.tcn.branches.5.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.transform.0.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.tcn.transform.0.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.tcn.transform.0.running_mean: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.tcn.transform.0.running_var: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.tcn.transform.2.weight: copying a param with shape torch.Size([128, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([192, 192, 1, 1]).
size mismatch for backbone.gcn.4.tcn.transform.2.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.tcn.bn.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.tcn.bn.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.tcn.bn.running_mean: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.tcn.bn.running_var: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.residual.conv.weight: copying a param with shape torch.Size([128, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([192, 96, 1, 1]).
size mismatch for backbone.gcn.4.residual.conv.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.residual.bn.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.residual.bn.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.residual.bn.running_mean: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.residual.bn.running_var: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.5.gcn.bn.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.5.gcn.bn.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.5.gcn.bn.running_mean: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.5.gcn.bn.running_var: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.5.gcn.conv.weight: copying a param with shape torch.Size([384, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([576, 192, 1, 1]).
size mismatch for backbone.gcn.5.gcn.conv.bias: copying a param with shape torch.Size([384]) from checkpoint, the shape in current model is torch.Size([576]).
size mismatch for backbone.gcn.5.tcn.branches.0.0.weight: copying a param with shape torch.Size([23, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([32, 192, 1, 1]).
size mismatch for backbone.gcn.5.tcn.branches.0.0.bias: copying a param with shape torch.Size([23]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.0.1.weight: copying a param with shape torch.Size([23]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.0.1.bias: copying a param with shape torch.Size([23]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.0.1.running_mean: copying a param with shape torch.Size([23]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.0.1.running_var: copying a param with shape torch.Size([23]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.0.3.conv.weight: copying a param with shape torch.Size([23, 23, 3, 1]) from checkpoint, the shape in current model is torch.Size([32, 32, 3, 1]).
size mismatch for backbone.gcn.5.tcn.branches.0.3.conv.bias: copying a param with shape torch.Size([23]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.1.0.weight: copying a param with shape torch.Size([21, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([32, 192, 1, 1]).
size mismatch for backbone.gcn.5.tcn.branches.1.0.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.1.1.weight: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.1.1.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.1.1.running_mean: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.1.1.running_var: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.1.3.conv.weight: copying a param with shape torch.Size([21, 21, 3, 1]) from checkpoint, the shape in current model is torch.Size([32, 32, 3, 1]).
size mismatch for backbone.gcn.5.tcn.branches.1.3.conv.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.2.0.weight: copying a param with shape torch.Size([21, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([32, 192, 1, 1]).
size mismatch for backbone.gcn.5.tcn.branches.2.0.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.2.1.weight: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.2.1.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.2.1.running_mean: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.2.1.running_var: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.2.3.conv.weight: copying a param with shape torch.Size([21, 21, 3, 1]) from checkpoint, the shape in current model is torch.Size([32, 32, 3, 1]).
size mismatch for backbone.gcn.5.tcn.branches.2.3.conv.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.3.0.weight: copying a param with shape torch.Size([21, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([32, 192, 1, 1]).
size mismatch for backbone.gcn.5.tcn.branches.3.0.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.3.1.weight: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.3.1.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.3.1.running_mean: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.3.1.running_var: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.3.3.conv.weight: copying a param with shape torch.Size([21, 21, 3, 1]) from checkpoint, the shape in current model is torch.Size([32, 32, 3, 1]).
size mismatch for backbone.gcn.5.tcn.branches.3.3.conv.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.4.0.weight: copying a param with shape torch.Size([21, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([32, 192, 1, 1]).
size mismatch for backbone.gcn.5.tcn.branches.4.0.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.4.1.weight: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.4.1.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.4.1.running_mean: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.4.1.running_var: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.5.weight: copying a param with shape torch.Size([21, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([32, 192, 1, 1]).
size mismatch for backbone.gcn.5.tcn.branches.5.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.transform.0.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.5.tcn.transform.0.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.5.tcn.transform.0.running_mean: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.5.tcn.transform.0.running_var: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.5.tcn.transform.2.weight: copying a param with shape torch.Size([128, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([192, 192, 1, 1]).
size mismatch for backbone.gcn.5.tcn.transform.2.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.5.tcn.bn.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.5.tcn.bn.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.5.tcn.bn.running_mean: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.5.tcn.bn.running_var: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for cls_head.fc.weight: copying a param with shape torch.Size([60, 256]) from checkpoint, the shape in current model is torch.Size([2, 192]).
size mismatch for cls_head.fc.bias: copying a param with shape torch.Size([60]) from checkpoint, the shape in current model is torch.Size([2]).
unexpected key in source state_dict: backbone.gcn.6.gcn.A, backbone.gcn.6.gcn.bn.weight, backbone.gcn.6.gcn.bn.bias, backbone.gcn.6.gcn.bn.running_mean, backbone.gcn.6.gcn.bn.running_var, backbone.gcn.6.gcn.bn.num_batches_tracked, backbone.gcn.6.gcn.conv.weight, backbone.gcn.6.gcn.conv.bias, backbone.gcn.6.tcn.branches.0.0.weight, backbone.gcn.6.tcn.branches.0.0.bias, backbone.gcn.6.tcn.branches.0.1.weight, backbone.gcn.6.tcn.branches.0.1.bias, backbone.gcn.6.tcn.branches.0.1.running_mean, backbone.gcn.6.tcn.branches.0.1.running_var, backbone.gcn.6.tcn.branches.0.1.num_batches_tracked, backbone.gcn.6.tcn.branches.0.3.conv.weight, backbone.gcn.6.tcn.branches.0.3.conv.bias, backbone.gcn.6.tcn.branches.1.0.weight, backbone.gcn.6.tcn.branches.1.0.bias, backbone.gcn.6.tcn.branches.1.1.weight, backbone.gcn.6.tcn.branches.1.1.bias, backbone.gcn.6.tcn.branches.1.1.running_mean, backbone.gcn.6.tcn.branches.1.1.running_var, backbone.gcn.6.tcn.branches.1.1.num_batches_tracked, backbone.gcn.6.tcn.branches.1.3.conv.weight, backbone.gcn.6.tcn.branches.1.3.conv.bias, backbone.gcn.6.tcn.branches.2.0.weight, backbone.gcn.6.tcn.branches.2.0.bias, backbone.gcn.6.tcn.branches.2.1.weight, backbone.gcn.6.tcn.branches.2.1.bias, backbone.gcn.6.tcn.branches.2.1.running_mean, backbone.gcn.6.tcn.branches.2.1.running_var, backbone.gcn.6.tcn.branches.2.1.num_batches_tracked, backbone.gcn.6.tcn.branches.2.3.conv.weight, backbone.gcn.6.tcn.branches.2.3.conv.bias, backbone.gcn.6.tcn.branches.3.0.weight, backbone.gcn.6.tcn.branches.3.0.bias, backbone.gcn.6.tcn.branches.3.1.weight, backbone.gcn.6.tcn.branches.3.1.bias, backbone.gcn.6.tcn.branches.3.1.running_mean, backbone.gcn.6.tcn.branches.3.1.running_var, backbone.gcn.6.tcn.branches.3.1.num_batches_tracked, backbone.gcn.6.tcn.branches.3.3.conv.weight, backbone.gcn.6.tcn.branches.3.3.conv.bias, backbone.gcn.6.tcn.branches.4.0.weight, backbone.gcn.6.tcn.branches.4.0.bias, backbone.gcn.6.tcn.branches.4.1.weight, backbone.gcn.6.tcn.branches.4.1.bias, backbone.gcn.6.tcn.branches.4.1.running_mean, backbone.gcn.6.tcn.branches.4.1.running_var, backbone.gcn.6.tcn.branches.4.1.num_batches_tracked, backbone.gcn.6.tcn.branches.5.weight, backbone.gcn.6.tcn.branches.5.bias, backbone.gcn.6.tcn.transform.0.weight, backbone.gcn.6.tcn.transform.0.bias, backbone.gcn.6.tcn.transform.0.running_mean, backbone.gcn.6.tcn.transform.0.running_var, backbone.gcn.6.tcn.transform.0.num_batches_tracked, backbone.gcn.6.tcn.transform.2.weight, backbone.gcn.6.tcn.transform.2.bias, backbone.gcn.6.tcn.bn.weight, backbone.gcn.6.tcn.bn.bias, backbone.gcn.6.tcn.bn.running_mean, backbone.gcn.6.tcn.bn.running_var, backbone.gcn.6.tcn.bn.num_batches_tracked, backbone.gcn.7.gcn.A, backbone.gcn.7.gcn.bn.weight, backbone.gcn.7.gcn.bn.bias, backbone.gcn.7.gcn.bn.running_mean, backbone.gcn.7.gcn.bn.running_var, backbone.gcn.7.gcn.bn.num_batches_tracked, backbone.gcn.7.gcn.conv.weight, backbone.gcn.7.gcn.conv.bias, backbone.gcn.7.gcn.down.0.weight, backbone.gcn.7.gcn.down.0.bias, backbone.gcn.7.gcn.down.1.weight, backbone.gcn.7.gcn.down.1.bias, backbone.gcn.7.gcn.down.1.running_mean, backbone.gcn.7.gcn.down.1.running_var, backbone.gcn.7.gcn.down.1.num_batches_tracked, backbone.gcn.7.tcn.branches.0.0.weight, backbone.gcn.7.tcn.branches.0.0.bias, backbone.gcn.7.tcn.branches.0.1.weight, backbone.gcn.7.tcn.branches.0.1.bias, backbone.gcn.7.tcn.branches.0.1.running_mean, backbone.gcn.7.tcn.branches.0.1.running_var, backbone.gcn.7.tcn.branches.0.1.num_batches_tracked, backbone.gcn.7.tcn.branches.0.3.conv.weight, backbone.gcn.7.tcn.branches.0.3.conv.bias, backbone.gcn.7.tcn.branches.1.0.weight, backbone.gcn.7.tcn.branches.1.0.bias, backbone.gcn.7.tcn.branches.1.1.weight, backbone.gcn.7.tcn.branches.1.1.bias, backbone.gcn.7.tcn.branches.1.1.running_mean, backbone.gcn.7.tcn.branches.1.1.running_var, backbone.gcn.7.tcn.branches.1.1.num_batches_tracked, backbone.gcn.7.tcn.branches.1.3.conv.weight, backbone.gcn.7.tcn.branches.1.3.conv.bias, backbone.gcn.7.tcn.branches.2.0.weight, backbone.gcn.7.tcn.branches.2.0.bias, backbone.gcn.7.tcn.branches.2.1.weight, backbone.gcn.7.tcn.branches.2.1.bias, backbone.gcn.7.tcn.branches.2.1.running_mean, backbone.gcn.7.tcn.branches.2.1.running_var, backbone.gcn.7.tcn.branches.2.1.num_batches_tracked, backbone.gcn.7.tcn.branches.2.3.conv.weight, backbone.gcn.7.tcn.branches.2.3.conv.bias, backbone.gcn.7.tcn.branches.3.0.weight, backbone.gcn.7.tcn.branches.3.0.bias, backbone.gcn.7.tcn.branches.3.1.weight, backbone.gcn.7.tcn.branches.3.1.bias, backbone.gcn.7.tcn.branches.3.1.running_mean, backbone.gcn.7.tcn.branches.3.1.running_var, backbone.gcn.7.tcn.branches.3.1.num_batches_tracked, backbone.gcn.7.tcn.branches.3.3.conv.weight, backbone.gcn.7.tcn.branches.3.3.conv.bias, backbone.gcn.7.tcn.branches.4.0.weight, backbone.gcn.7.tcn.branches.4.0.bias, backbone.gcn.7.tcn.branches.4.1.weight, backbone.gcn.7.tcn.branches.4.1.bias, backbone.gcn.7.tcn.branches.4.1.running_mean, backbone.gcn.7.tcn.branches.4.1.running_var, backbone.gcn.7.tcn.branches.4.1.num_batches_tracked, backbone.gcn.7.tcn.branches.5.weight, backbone.gcn.7.tcn.branches.5.bias, backbone.gcn.7.tcn.transform.0.weight, backbone.gcn.7.tcn.transform.0.bias, backbone.gcn.7.tcn.transform.0.running_mean, backbone.gcn.7.tcn.transform.0.running_var, backbone.gcn.7.tcn.transform.0.num_batches_tracked, backbone.gcn.7.tcn.transform.2.weight, backbone.gcn.7.tcn.transform.2.bias, backbone.gcn.7.tcn.bn.weight, backbone.gcn.7.tcn.bn.bias, backbone.gcn.7.tcn.bn.running_mean, backbone.gcn.7.tcn.bn.running_var, backbone.gcn.7.tcn.bn.num_batches_tracked, backbone.gcn.7.residual.conv.weight, backbone.gcn.7.residual.conv.bias, backbone.gcn.7.residual.bn.weight, backbone.gcn.7.residual.bn.bias, backbone.gcn.7.residual.bn.running_mean, backbone.gcn.7.residual.bn.running_var, backbone.gcn.7.residual.bn.num_batches_tracked, backbone.gcn.8.gcn.A, backbone.gcn.8.gcn.bn.weight, backbone.gcn.8.gcn.bn.bias, backbone.gcn.8.gcn.bn.running_mean, backbone.gcn.8.gcn.bn.running_var, backbone.gcn.8.gcn.bn.num_batches_tracked, backbone.gcn.8.gcn.conv.weight, backbone.gcn.8.gcn.conv.bias, backbone.gcn.8.tcn.branches.0.0.weight, backbone.gcn.8.tcn.branches.0.0.bias, backbone.gcn.8.tcn.branches.0.1.weight, backbone.gcn.8.tcn.branches.0.1.bias, backbone.gcn.8.tcn.branches.0.1.running_mean, backbone.gcn.8.tcn.branches.0.1.running_var, backbone.gcn.8.tcn.branches.0.1.num_batches_tracked, backbone.gcn.8.tcn.branches.0.3.conv.weight, backbone.gcn.8.tcn.branches.0.3.conv.bias, backbone.gcn.8.tcn.branches.1.0.weight, backbone.gcn.8.tcn.branches.1.0.bias, backbone.gcn.8.tcn.branches.1.1.weight, backbone.gcn.8.tcn.branches.1.1.bias, backbone.gcn.8.tcn.branches.1.1.running_mean, backbone.gcn.8.tcn.branches.1.1.running_var, backbone.gcn.8.tcn.branches.1.1.num_batches_tracked, backbone.gcn.8.tcn.branches.1.3.conv.weight, backbone.gcn.8.tcn.branches.1.3.conv.bias, backbone.gcn.8.tcn.branches.2.0.weight, backbone.gcn.8.tcn.branches.2.0.bias, backbone.gcn.8.tcn.branches.2.1.weight, backbone.gcn.8.tcn.branches.2.1.bias, backbone.gcn.8.tcn.branches.2.1.running_mean, backbone.gcn.8.tcn.branches.2.1.running_var, backbone.gcn.8.tcn.branches.2.1.num_batches_tracked, backbone.gcn.8.tcn.branches.2.3.conv.weight, backbone.gcn.8.tcn.branches.2.3.conv.bias, backbone.gcn.8.tcn.branches.3.0.weight, backbone.gcn.8.tcn.branches.3.0.bias, backbone.gcn.8.tcn.branches.3.1.weight, backbone.gcn.8.tcn.branches.3.1.bias, backbone.gcn.8.tcn.branches.3.1.running_mean, backbone.gcn.8.tcn.branches.3.1.running_var, backbone.gcn.8.tcn.branches.3.1.num_batches_tracked, backbone.gcn.8.tcn.branches.3.3.conv.weight, backbone.gcn.8.tcn.branches.3.3.conv.bias, backbone.gcn.8.tcn.branches.4.0.weight, backbone.gcn.8.tcn.branches.4.0.bias, backbone.gcn.8.tcn.branches.4.1.weight, backbone.gcn.8.tcn.branches.4.1.bias, backbone.gcn.8.tcn.branches.4.1.running_mean, backbone.gcn.8.tcn.branches.4.1.running_var, backbone.gcn.8.tcn.branches.4.1.num_batches_tracked, backbone.gcn.8.tcn.branches.5.weight, backbone.gcn.8.tcn.branches.5.bias, backbone.gcn.8.tcn.transform.0.weight, backbone.gcn.8.tcn.transform.0.bias, backbone.gcn.8.tcn.transform.0.running_mean, backbone.gcn.8.tcn.transform.0.running_var, backbone.gcn.8.tcn.transform.0.num_batches_tracked, backbone.gcn.8.tcn.transform.2.weight, backbone.gcn.8.tcn.transform.2.bias, backbone.gcn.8.tcn.bn.weight, backbone.gcn.8.tcn.bn.bias, backbone.gcn.8.tcn.bn.running_mean, backbone.gcn.8.tcn.bn.running_var, backbone.gcn.8.tcn.bn.num_batches_tracked, backbone.gcn.9.gcn.A, backbone.gcn.9.gcn.bn.weight, backbone.gcn.9.gcn.bn.bias, backbone.gcn.9.gcn.bn.running_mean, backbone.gcn.9.gcn.bn.running_var, backbone.gcn.9.gcn.bn.num_batches_tracked, backbone.gcn.9.gcn.conv.weight, backbone.gcn.9.gcn.conv.bias, backbone.gcn.9.tcn.branches.0.0.weight, backbone.gcn.9.tcn.branches.0.0.bias, backbone.gcn.9.tcn.branches.0.1.weight, backbone.gcn.9.tcn.branches.0.1.bias, backbone.gcn.9.tcn.branches.0.1.running_mean, backbone.gcn.9.tcn.branches.0.1.running_var, backbone.gcn.9.tcn.branches.0.1.num_batches_tracked, backbone.gcn.9.tcn.branches.0.3.conv.weight, backbone.gcn.9.tcn.branches.0.3.conv.bias, backbone.gcn.9.tcn.branches.1.0.weight, backbone.gcn.9.tcn.branches.1.0.bias, backbone.gcn.9.tcn.branches.1.1.weight, backbone.gcn.9.tcn.branches.1.1.bias, backbone.gcn.9.tcn.branches.1.1.running_mean, backbone.gcn.9.tcn.branches.1.1.running_var, backbone.gcn.9.tcn.branches.1.1.num_batches_tracked, backbone.gcn.9.tcn.branches.1.3.conv.weight, backbone.gcn.9.tcn.branches.1.3.conv.bias, backbone.gcn.9.tcn.branches.2.0.weight, backbone.gcn.9.tcn.branches.2.0.bias, backbone.gcn.9.tcn.branches.2.1.weight, backbone.gcn.9.tcn.branches.2.1.bias, backbone.gcn.9.tcn.branches.2.1.running_mean, backbone.gcn.9.tcn.branches.2.1.running_var, backbone.gcn.9.tcn.branches.2.1.num_batches_tracked, backbone.gcn.9.tcn.branches.2.3.conv.weight, backbone.gcn.9.tcn.branches.2.3.conv.bias, backbone.gcn.9.tcn.branches.3.0.weight, backbone.gcn.9.tcn.branches.3.0.bias, backbone.gcn.9.tcn.branches.3.1.weight, backbone.gcn.9.tcn.branches.3.1.bias, backbone.gcn.9.tcn.branches.3.1.running_mean, backbone.gcn.9.tcn.branches.3.1.running_var, backbone.gcn.9.tcn.branches.3.1.num_batches_tracked, backbone.gcn.9.tcn.branches.3.3.conv.weight, backbone.gcn.9.tcn.branches.3.3.conv.bias, backbone.gcn.9.tcn.branches.4.0.weight, backbone.gcn.9.tcn.branches.4.0.bias, backbone.gcn.9.tcn.branches.4.1.weight, backbone.gcn.9.tcn.branches.4.1.bias, backbone.gcn.9.tcn.branches.4.1.running_mean, backbone.gcn.9.tcn.branches.4.1.running_var, backbone.gcn.9.tcn.branches.4.1.num_batches_tracked, backbone.gcn.9.tcn.branches.5.weight, backbone.gcn.9.tcn.branches.5.bias, backbone.gcn.9.tcn.transform.0.weight, backbone.gcn.9.tcn.transform.0.bias, backbone.gcn.9.tcn.transform.0.running_mean, backbone.gcn.9.tcn.transform.0.running_var, backbone.gcn.9.tcn.transform.0.num_batches_tracked, backbone.gcn.9.tcn.transform.2.weight, backbone.gcn.9.tcn.transform.2.bias, backbone.gcn.9.tcn.bn.weight, backbone.gcn.9.tcn.bn.bias, backbone.gcn.9.tcn.bn.running_mean, backbone.gcn.9.tcn.bn.running_var, backbone.gcn.9.tcn.bn.num_batches_tracked

missing keys in source state_dict: backbone.gcn.2.gcn.down.0.weight, backbone.gcn.2.gcn.down.0.bias, backbone.gcn.2.gcn.down.1.weight, backbone.gcn.2.gcn.down.1.bias, backbone.gcn.2.gcn.down.1.running_mean, backbone.gcn.2.gcn.down.1.running_var, backbone.gcn.2.residual.conv.weight, backbone.gcn.2.residual.conv.bias, backbone.gcn.2.residual.bn.weight, backbone.gcn.2.residual.bn.bias, backbone.gcn.2.residual.bn.running_mean, backbone.gcn.2.residual.bn.running_var

08/26 06:15:00 - mmengine - INFO - Load checkpoint from /workspace/mmaction2/checkpoints/stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-2d_20221228-cd11a691.pth
08/26 06:15:00 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
08/26 06:15:00 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
08/26 06:15:00 - mmengine - INFO - Checkpoints will be saved to /workspace/mmaction2/work_dirs/stgcnpp-bone-ntu60_rtmo-l_RWF2000plus_stable.
08/26 06:15:08 - mmengine - INFO - Epoch(train)  [1][ 20/250]  lr: 3.1325e-08  eta: 0:26:21  time: 0.4240  data_time: 0.0245  memory: 2174  grad_norm: 3.6974  loss: 0.6973  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6973
08/26 06:15:13 - mmengine - INFO - Epoch(train)  [1][ 40/250]  lr: 5.1141e-08  eta: 0:20:20  time: 0.2340  data_time: 0.0076  memory: 1907  grad_norm: 3.9032  loss: 0.6992  top1_acc: 0.4375  top5_acc: 1.0000  loss_cls: 0.6992
08/26 06:15:18 - mmengine - INFO - Epoch(train)  [1][ 60/250]  lr: 7.0957e-08  eta: 0:18:37  time: 0.2505  data_time: 0.0074  memory: 1907  grad_norm: 3.6817  loss: 0.6923  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6923
08/26 06:15:23 - mmengine - INFO - Epoch(train)  [1][ 80/250]  lr: 9.0773e-08  eta: 0:17:43  time: 0.2501  data_time: 0.0074  memory: 1907  grad_norm: 3.8107  loss: 0.6997  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6997
08/26 06:15:28 - mmengine - INFO - Epoch(train)  [1][100/250]  lr: 1.1059e-07  eta: 0:16:56  time: 0.2335  data_time: 0.0074  memory: 1907  grad_norm: 3.0651  loss: 0.6930  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6930
08/26 06:15:33 - mmengine - INFO - Epoch(train)  [1][120/250]  lr: 1.3040e-07  eta: 0:16:33  time: 0.2500  data_time: 0.0073  memory: 1907  grad_norm: 3.3210  loss: 0.6954  top1_acc: 0.2500  top5_acc: 1.0000  loss_cls: 0.6954
08/26 06:15:38 - mmengine - INFO - Epoch(train)  [1][140/250]  lr: 1.5022e-07  eta: 0:16:15  time: 0.2502  data_time: 0.0073  memory: 1907  grad_norm: 3.6050  loss: 0.6936  top1_acc: 0.3125  top5_acc: 1.0000  loss_cls: 0.6936
08/26 06:15:43 - mmengine - INFO - Epoch(train)  [1][160/250]  lr: 1.7004e-07  eta: 0:16:02  time: 0.2527  data_time: 0.0075  memory: 1907  grad_norm: 3.7789  loss: 0.6940  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6940
08/26 06:15:47 - mmengine - INFO - Epoch(train)  [1][180/250]  lr: 1.8985e-07  eta: 0:15:43  time: 0.2326  data_time: 0.0075  memory: 1907  grad_norm: 3.6542  loss: 0.6904  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6904
08/26 06:15:52 - mmengine - INFO - Epoch(train)  [1][200/250]  lr: 2.0967e-07  eta: 0:15:32  time: 0.2497  data_time: 0.0076  memory: 1907  grad_norm: 3.8371  loss: 0.6993  top1_acc: 0.3750  top5_acc: 1.0000  loss_cls: 0.6993
08/26 06:15:57 - mmengine - INFO - Epoch(train)  [1][220/250]  lr: 2.2948e-07  eta: 0:15:23  time: 0.2502  data_time: 0.0072  memory: 1907  grad_norm: 3.2248  loss: 0.6901  top1_acc: 0.4375  top5_acc: 1.0000  loss_cls: 0.6901
08/26 06:16:02 - mmengine - INFO - Epoch(train)  [1][240/250]  lr: 2.4930e-07  eta: 0:15:09  time: 0.2312  data_time: 0.0073  memory: 1907  grad_norm: 3.8548  loss: 0.6985  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.6985
08/26 06:16:06 - mmengine - INFO - Exp name: stgcnpp_enhanced_fight_detection_stable_20250826_061456
08/26 06:16:06 - mmengine - INFO - Epoch(train)  [1][250/250]  lr: 2.5921e-07  eta: 0:15:30  time: 0.3208  data_time: 0.0070  memory: 1907  grad_norm: 3.8208  loss: 0.6917  top1_acc: 0.0000  top5_acc: 1.0000  loss_cls: 0.6917
08/26 06:16:08 - mmengine - INFO - Epoch(val)  [1][20/72]    eta: 0:00:05  time: 0.1048  data_time: 0.0221  memory: 383  
08/26 06:16:10 - mmengine - INFO - Epoch(val)  [1][40/72]    eta: 0:00:03  time: 0.0878  data_time: 0.0082  memory: 383  
08/26 06:16:12 - mmengine - INFO - Epoch(val)  [1][60/72]    eta: 0:00:01  time: 0.0784  data_time: 0.0082  memory: 383  
08/26 06:16:13 - mmengine - INFO - Epoch(val) [1][72/72]    acc/top1: 0.5123  acc/mean1: 0.5463  data_time: 0.0120  time: 0.0974
08/26 06:16:13 - mmengine - INFO - The best checkpoint with 0.5123 acc/top1 at 1 epoch is saved to best_acc_top1_epoch_1.pth.
08/26 06:16:19 - mmengine - INFO - Epoch(train)  [2][ 20/250]  lr: 2.7902e-07  eta: 0:15:22  time: 0.2551  data_time: 0.0108  memory: 1907  grad_norm: 3.7116  loss: 0.6939  top1_acc: 0.3125  top5_acc: 1.0000  loss_cls: 0.6939
08/26 06:16:24 - mmengine - INFO - Epoch(train)  [2][ 40/250]  lr: 2.9884e-07  eta: 0:15:14  time: 0.2550  data_time: 0.0078  memory: 1907  grad_norm: 3.3478  loss: 0.6936  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6936
08/26 06:16:28 - mmengine - INFO - Epoch(train)  [2][ 60/250]  lr: 3.1865e-07  eta: 0:15:03  time: 0.2363  data_time: 0.0079  memory: 1907  grad_norm: 3.3578  loss: 0.6893  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6893
08/26 06:16:33 - mmengine - INFO - Epoch(train)  [2][ 80/250]  lr: 3.3847e-07  eta: 0:14:56  time: 0.2560  data_time: 0.0081  memory: 1907  grad_norm: 3.4717  loss: 0.6904  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6904
08/26 06:16:39 - mmengine - INFO - Epoch(train)  [2][100/250]  lr: 3.5829e-07  eta: 0:14:49  time: 0.2531  data_time: 0.0076  memory: 1907  grad_norm: 3.1495  loss: 0.6868  top1_acc: 0.3750  top5_acc: 1.0000  loss_cls: 0.6868
08/26 06:16:43 - mmengine - INFO - Epoch(train)  [2][120/250]  lr: 3.7810e-07  eta: 0:14:39  time: 0.2332  data_time: 0.0074  memory: 1907  grad_norm: 3.4611  loss: 0.6887  top1_acc: 0.4375  top5_acc: 1.0000  loss_cls: 0.6887
08/26 06:16:48 - mmengine - INFO - Epoch(train)  [2][140/250]  lr: 3.9792e-07  eta: 0:14:32  time: 0.2538  data_time: 0.0075  memory: 1907  grad_norm: 3.7045  loss: 0.6949  top1_acc: 0.3750  top5_acc: 1.0000  loss_cls: 0.6949
08/26 06:16:53 - mmengine - INFO - Epoch(train)  [2][160/250]  lr: 4.1773e-07  eta: 0:14:26  time: 0.2512  data_time: 0.0072  memory: 1907  grad_norm: 3.5673  loss: 0.6898  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6898
08/26 06:16:58 - mmengine - INFO - Epoch(train)  [2][180/250]  lr: 4.3755e-07  eta: 0:14:18  time: 0.2426  data_time: 0.0074  memory: 1907  grad_norm: 3.2714  loss: 0.6979  top1_acc: 0.3750  top5_acc: 1.0000  loss_cls: 0.6979
08/26 06:17:03 - mmengine - INFO - Epoch(train)  [2][200/250]  lr: 4.5737e-07  eta: 0:14:11  time: 0.2461  data_time: 0.0078  memory: 1907  grad_norm: 3.7504  loss: 0.6820  top1_acc: 0.3750  top5_acc: 1.0000  loss_cls: 0.6820
08/26 06:17:08 - mmengine - INFO - Epoch(train)  [2][220/250]  lr: 4.7718e-07  eta: 0:14:05  time: 0.2491  data_time: 0.0076  memory: 1907  grad_norm: 3.5749  loss: 0.6950  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6950
08/26 06:17:13 - mmengine - INFO - Epoch(train)  [2][240/250]  lr: 4.9700e-07  eta: 0:13:58  time: 0.2482  data_time: 0.0075  memory: 1907  grad_norm: 3.3741  loss: 0.6860  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6860
08/26 06:17:15 - mmengine - INFO - Exp name: stgcnpp_enhanced_fight_detection_stable_20250826_061456
08/26 06:17:15 - mmengine - INFO - Epoch(train)  [2][250/250]  lr: 5.0691e-07  eta: 0:13:53  time: 0.2290  data_time: 0.0072  memory: 1907  grad_norm: 3.6153  loss: 0.6884  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.6884
08/26 06:17:17 - mmengine - INFO - Epoch(val)  [2][20/72]    eta: 0:00:04  time: 0.0916  data_time: 0.0105  memory: 383  
08/26 06:17:19 - mmengine - INFO - Epoch(val)  [2][40/72]    eta: 0:00:02  time: 0.0873  data_time: 0.0079  memory: 383  
08/26 06:17:20 - mmengine - INFO - Epoch(val)  [2][60/72]    eta: 0:00:01  time: 0.0859  data_time: 0.0079  memory: 383  
08/26 06:17:21 - mmengine - INFO - Epoch(val) [2][72/72]    acc/top1: 0.5633  acc/mean1: 0.5900  data_time: 0.0084  time: 0.0953
08/26 06:17:21 - mmengine - INFO - The previous best checkpoint /workspace/mmaction2/work_dirs/stgcnpp-bone-ntu60_rtmo-l_RWF2000plus_stable/best_acc_top1_epoch_1.pth is removed
08/26 06:17:22 - mmengine - INFO - The best checkpoint with 0.5633 acc/top1 at 2 epoch is saved to best_acc_top1_epoch_2.pth.
08/26 06:17:27 - mmengine - INFO - Epoch(train)  [3][ 20/250]  lr: 5.2672e-07  eta: 0:13:47  time: 0.2507  data_time: 0.0094  memory: 1907  grad_norm: 3.4749  loss: 0.6861  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6861
08/26 06:17:31 - mmengine - INFO - Epoch(train)  [3][ 40/250]  lr: 5.4654e-07  eta: 0:13:39  time: 0.2337  data_time: 0.0073  memory: 1907  grad_norm: 3.3698  loss: 0.6898  top1_acc: 0.2500  top5_acc: 1.0000  loss_cls: 0.6898
08/26 06:17:36 - mmengine - INFO - Epoch(train)  [3][ 60/250]  lr: 5.6635e-07  eta: 0:13:34  time: 0.2542  data_time: 0.0074  memory: 1907  grad_norm: 3.4629  loss: 0.6780  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6780
08/26 06:17:41 - mmengine - INFO - Epoch(train)  [3][ 80/250]  lr: 5.8617e-07  eta: 0:13:28  time: 0.2492  data_time: 0.0073  memory: 1907  grad_norm: 2.9477  loss: 0.6883  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6883
08/26 06:17:46 - mmengine - INFO - Epoch(train)  [3][100/250]  lr: 6.0598e-07  eta: 0:13:21  time: 0.2334  data_time: 0.0073  memory: 1907  grad_norm: 3.3674  loss: 0.6885  top1_acc: 0.3750  top5_acc: 1.0000  loss_cls: 0.6885
08/26 06:17:51 - mmengine - INFO - Epoch(train)  [3][120/250]  lr: 6.2580e-07  eta: 0:13:15  time: 0.2490  data_time: 0.0072  memory: 1907  grad_norm: 3.3601  loss: 0.6794  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6794
08/26 06:17:56 - mmengine - INFO - Epoch(train)  [3][140/250]  lr: 6.4562e-07  eta: 0:13:09  time: 0.2485  data_time: 0.0072  memory: 1907  grad_norm: 3.5817  loss: 0.6832  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6832
08/26 06:18:01 - mmengine - INFO - Epoch(train)  [3][160/250]  lr: 6.6543e-07  eta: 0:13:02  time: 0.2329  data_time: 0.0076  memory: 1907  grad_norm: 3.2082  loss: 0.6817  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6817
08/26 06:18:06 - mmengine - INFO - Epoch(train)  [3][180/250]  lr: 6.8525e-07  eta: 0:12:57  time: 0.2505  data_time: 0.0074  memory: 1907  grad_norm: 3.2192  loss: 0.6833  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6833
08/26 06:18:11 - mmengine - INFO - Epoch(train)  [3][200/250]  lr: 7.0506e-07  eta: 0:12:52  time: 0.2491  data_time: 0.0072  memory: 1907  grad_norm: 3.3402  loss: 0.6867  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6867
08/26 06:18:16 - mmengine - INFO - Epoch(train)  [3][220/250]  lr: 7.2488e-07  eta: 0:12:46  time: 0.2496  data_time: 0.0072  memory: 1907  grad_norm: 3.4499  loss: 0.6823  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6823
08/26 06:18:20 - mmengine - INFO - Epoch(train)  [3][240/250]  lr: 7.4470e-07  eta: 0:12:39  time: 0.2327  data_time: 0.0072  memory: 1907  grad_norm: 3.4951  loss: 0.6828  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6828
08/26 06:18:23 - mmengine - INFO - Exp name: stgcnpp_enhanced_fight_detection_stable_20250826_061456
08/26 06:18:23 - mmengine - INFO - Epoch(train)  [3][250/250]  lr: 7.5460e-07  eta: 0:12:37  time: 0.2479  data_time: 0.0070  memory: 1907  grad_norm: 3.8054  loss: 0.6773  top1_acc: 0.0000  top5_acc: 1.0000  loss_cls: 0.6773
08/26 06:18:25 - mmengine - INFO - Epoch(val)  [3][20/72]    eta: 0:00:04  time: 0.0916  data_time: 0.0105  memory: 383  
08/26 06:18:26 - mmengine - INFO - Epoch(val)  [3][40/72]    eta: 0:00:02  time: 0.0864  data_time: 0.0075  memory: 383  
08/26 06:18:28 - mmengine - INFO - Epoch(val)  [3][60/72]    eta: 0:00:01  time: 0.0874  data_time: 0.0077  memory: 383  
08/26 06:18:29 - mmengine - INFO - Epoch(val) [3][72/72]    acc/top1: 0.6801  acc/mean1: 0.6900  data_time: 0.0083  time: 0.0871
08/26 06:18:29 - mmengine - INFO - The previous best checkpoint /workspace/mmaction2/work_dirs/stgcnpp-bone-ntu60_rtmo-l_RWF2000plus_stable/best_acc_top1_epoch_2.pth is removed
08/26 06:18:29 - mmengine - INFO - The best checkpoint with 0.6801 acc/top1 at 3 epoch is saved to best_acc_top1_epoch_3.pth.
08/26 06:18:34 - mmengine - INFO - Epoch(train)  [4][ 20/250]  lr: 7.7442e-07  eta: 0:12:31  time: 0.2489  data_time: 0.0104  memory: 1907  grad_norm: 3.7228  loss: 0.6884  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6884
08/26 06:18:39 - mmengine - INFO - Epoch(train)  [4][ 40/250]  lr: 7.9424e-07  eta: 0:12:26  time: 0.2522  data_time: 0.0075  memory: 1907  grad_norm: 3.6867  loss: 0.6776  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6776
08/26 06:18:44 - mmengine - INFO - Epoch(train)  [4][ 60/250]  lr: 8.1405e-07  eta: 0:12:21  time: 0.2493  data_time: 0.0075  memory: 1907  grad_norm: 3.3796  loss: 0.6823  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6823
08/26 06:18:49 - mmengine - INFO - Epoch(train)  [4][ 80/250]  lr: 8.3387e-07  eta: 0:12:15  time: 0.2362  data_time: 0.0075  memory: 1907  grad_norm: 3.2265  loss: 0.6750  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6750
08/26 06:18:54 - mmengine - INFO - Epoch(train)  [4][100/250]  lr: 8.5368e-07  eta: 0:12:10  time: 0.2553  data_time: 0.0076  memory: 1907  grad_norm: 3.1946  loss: 0.6789  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6789
08/26 06:18:59 - mmengine - INFO - Epoch(train)  [4][120/250]  lr: 8.7350e-07  eta: 0:12:05  time: 0.2535  data_time: 0.0073  memory: 1907  grad_norm: 3.4596  loss: 0.6798  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6798
08/26 06:19:04 - mmengine - INFO - Epoch(train)  [4][140/250]  lr: 8.9331e-07  eta: 0:11:59  time: 0.2348  data_time: 0.0074  memory: 1907  grad_norm: 2.9448  loss: 0.6732  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6732
08/26 06:19:09 - mmengine - INFO - Epoch(train)  [4][160/250]  lr: 9.1313e-07  eta: 0:11:54  time: 0.2524  data_time: 0.0073  memory: 1907  grad_norm: 3.3699  loss: 0.6702  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6702
08/26 06:19:14 - mmengine - INFO - Epoch(train)  [4][180/250]  lr: 9.3295e-07  eta: 0:11:49  time: 0.2501  data_time: 0.0072  memory: 1907  grad_norm: 3.0780  loss: 0.6709  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6709
08/26 06:19:19 - mmengine - INFO - Epoch(train)  [4][200/250]  lr: 9.5276e-07  eta: 0:11:43  time: 0.2427  data_time: 0.0071  memory: 1907  grad_norm: 3.2598  loss: 0.6776  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.6776
08/26 06:19:24 - mmengine - INFO - Epoch(train)  [4][220/250]  lr: 9.7258e-07  eta: 0:11:38  time: 0.2435  data_time: 0.0072  memory: 1907  grad_norm: 3.1036  loss: 0.6651  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6651
08/26 06:19:29 - mmengine - INFO - Epoch(train)  [4][240/250]  lr: 9.9239e-07  eta: 0:11:33  time: 0.2494  data_time: 0.0071  memory: 1907  grad_norm: 3.3498  loss: 0.6722  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6722
08/26 06:19:31 - mmengine - INFO - Exp name: stgcnpp_enhanced_fight_detection_stable_20250826_061456
08/26 06:19:31 - mmengine - INFO - Epoch(train)  [4][250/250]  lr: 1.0023e-06  eta: 0:11:30  time: 0.2455  data_time: 0.0068  memory: 1907  grad_norm: 3.3586  loss: 0.6733  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.6733
08/26 06:19:33 - mmengine - INFO - Epoch(val)  [4][20/72]    eta: 0:00:04  time: 0.0891  data_time: 0.0101  memory: 383  
08/26 06:19:34 - mmengine - INFO - Epoch(val)  [4][40/72]    eta: 0:00:02  time: 0.0746  data_time: 0.0077  memory: 383  
08/26 06:19:36 - mmengine - INFO - Epoch(val)  [4][60/72]    eta: 0:00:01  time: 0.0885  data_time: 0.0078  memory: 383  
08/26 06:19:37 - mmengine - INFO - Epoch(val) [4][72/72]    acc/top1: 0.7241  acc/mean1: 0.7192  data_time: 0.0082  time: 0.0836
08/26 06:19:37 - mmengine - INFO - The previous best checkpoint /workspace/mmaction2/work_dirs/stgcnpp-bone-ntu60_rtmo-l_RWF2000plus_stable/best_acc_top1_epoch_3.pth is removed
08/26 06:19:37 - mmengine - INFO - The best checkpoint with 0.7241 acc/top1 at 4 epoch is saved to best_acc_top1_epoch_4.pth.
08/26 06:19:42 - mmengine - INFO - Epoch(train)  [5][ 20/250]  lr: 1.0221e-06  eta: 0:11:25  time: 0.2546  data_time: 0.0100  memory: 1907  grad_norm: 3.0941  loss: 0.6599  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6599
08/26 06:19:48 - mmengine - INFO - Epoch(train)  [5][ 40/250]  lr: 1.0419e-06  eta: 0:11:20  time: 0.2532  data_time: 0.0079  memory: 1907  grad_norm: 3.6632  loss: 0.6723  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6723
08/26 06:19:52 - mmengine - INFO - Epoch(train)  [5][ 60/250]  lr: 1.0617e-06  eta: 0:11:14  time: 0.2361  data_time: 0.0076  memory: 1907  grad_norm: 3.1411  loss: 0.6600  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6600
08/26 06:19:57 - mmengine - INFO - Epoch(train)  [5][ 80/250]  lr: 1.0816e-06  eta: 0:11:09  time: 0.2534  data_time: 0.0076  memory: 1907  grad_norm: 3.0902  loss: 0.6606  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6606
08/26 06:20:02 - mmengine - INFO - Epoch(train)  [5][100/250]  lr: 1.1014e-06  eta: 0:11:05  time: 0.2524  data_time: 0.0079  memory: 1907  grad_norm: 2.7292  loss: 0.6676  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6676
08/26 06:20:07 - mmengine - INFO - Epoch(train)  [5][120/250]  lr: 1.1212e-06  eta: 0:10:59  time: 0.2367  data_time: 0.0079  memory: 1907  grad_norm: 3.0416  loss: 0.6602  top1_acc: 0.4375  top5_acc: 1.0000  loss_cls: 0.6602
08/26 06:20:12 - mmengine - INFO - Epoch(train)  [5][140/250]  lr: 1.1410e-06  eta: 0:10:54  time: 0.2538  data_time: 0.0079  memory: 1907  grad_norm: 3.1955  loss: 0.6593  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6593
08/26 06:20:17 - mmengine - INFO - Epoch(train)  [5][160/250]  lr: 1.1608e-06  eta: 0:10:49  time: 0.2526  data_time: 0.0079  memory: 1907  grad_norm: 3.0755  loss: 0.6736  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.6736
08/26 06:20:22 - mmengine - INFO - Epoch(train)  [5][180/250]  lr: 1.1806e-06  eta: 0:10:44  time: 0.2403  data_time: 0.0080  memory: 1907  grad_norm: 2.8761  loss: 0.6584  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6584
08/26 06:20:27 - mmengine - INFO - Epoch(train)  [5][200/250]  lr: 1.2005e-06  eta: 0:10:39  time: 0.2555  data_time: 0.0083  memory: 1907  grad_norm: 3.2018  loss: 0.6714  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.6714
08/26 06:20:32 - mmengine - INFO - Epoch(train)  [5][220/250]  lr: 1.2203e-06  eta: 0:10:34  time: 0.2546  data_time: 0.0079  memory: 1907  grad_norm: 3.2922  loss: 0.6712  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6712
08/26 06:20:37 - mmengine - INFO - Epoch(train)  [5][240/250]  lr: 1.2401e-06  eta: 0:10:28  time: 0.2334  data_time: 0.0074  memory: 1907  grad_norm: 3.1946  loss: 0.6566  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.6566
08/26 06:20:39 - mmengine - INFO - Exp name: stgcnpp_enhanced_fight_detection_stable_20250826_061456
08/26 06:20:39 - mmengine - INFO - Epoch(train)  [5][250/250]  lr: 1.2500e-06  eta: 0:10:26  time: 0.2304  data_time: 0.0071  memory: 1907  grad_norm: 3.3873  loss: 0.6566  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.6566
08/26 06:20:39 - mmengine - INFO - Saving checkpoint at 5 epochs
08/26 06:20:41 - mmengine - INFO - Epoch(val)  [5][20/72]    eta: 0:00:04  time: 0.0905  data_time: 0.0102  memory: 383  
08/26 06:20:43 - mmengine - INFO - Epoch(val)  [5][40/72]    eta: 0:00:02  time: 0.0868  data_time: 0.0075  memory: 383  
08/26 06:20:45 - mmengine - INFO - Epoch(val)  [5][60/72]    eta: 0:00:01  time: 0.0863  data_time: 0.0075  memory: 383  
08/26 06:20:46 - mmengine - INFO - Epoch(val) [5][72/72]    acc/top1: 0.7188  acc/mean1: 0.7141  data_time: 0.0080  time: 0.0869
08/26 06:20:51 - mmengine - INFO - Epoch(train)  [6][ 20/250]  lr: 1.2500e-06  eta: 0:10:20  time: 0.2361  data_time: 0.0109  memory: 1907  grad_norm: 3.0085  loss: 0.6620  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6620
08/26 06:20:56 - mmengine - INFO - Epoch(train)  [6][ 40/250]  lr: 1.2500e-06  eta: 0:10:15  time: 0.2507  data_time: 0.0072  memory: 1907  grad_norm: 2.9128  loss: 0.6577  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6577
08/26 06:21:01 - mmengine - INFO - Epoch(train)  [6][ 60/250]  lr: 1.2500e-06  eta: 0:10:10  time: 0.2503  data_time: 0.0078  memory: 1907  grad_norm: 3.0142  loss: 0.6674  top1_acc: 0.3125  top5_acc: 1.0000  loss_cls: 0.6674
08/26 06:21:05 - mmengine - INFO - Epoch(train)  [6][ 80/250]  lr: 1.2500e-06  eta: 0:10:05  time: 0.2381  data_time: 0.0078  memory: 1907  grad_norm: 3.1901  loss: 0.6586  top1_acc: 0.4375  top5_acc: 1.0000  loss_cls: 0.6586
08/26 06:21:10 - mmengine - INFO - Epoch(train)  [6][100/250]  lr: 1.2500e-06  eta: 0:10:00  time: 0.2508  data_time: 0.0072  memory: 1907  grad_norm: 2.8084  loss: 0.6632  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6632
08/26 06:21:15 - mmengine - INFO - Epoch(train)  [6][120/250]  lr: 1.2500e-06  eta: 0:09:55  time: 0.2499  data_time: 0.0073  memory: 1907  grad_norm: 3.1927  loss: 0.6358  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.6358
08/26 06:21:20 - mmengine - INFO - Epoch(train)  [6][140/250]  lr: 1.2500e-06  eta: 0:09:50  time: 0.2501  data_time: 0.0071  memory: 1907  grad_norm: 2.9669  loss: 0.6546  top1_acc: 0.8125  top5_acc: 1.0000  loss_cls: 0.6546
08/26 06:21:25 - mmengine - INFO - Epoch(train)  [6][160/250]  lr: 1.2500e-06  eta: 0:09:44  time: 0.2318  data_time: 0.0073  memory: 1907  grad_norm: 2.7380  loss: 0.6507  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6507
08/26 06:21:30 - mmengine - INFO - Epoch(train)  [6][180/250]  lr: 1.2500e-06  eta: 0:09:39  time: 0.2501  data_time: 0.0075  memory: 1907  grad_norm: 2.7818  loss: 0.6527  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6527
08/26 06:21:35 - mmengine - INFO - Epoch(train)  [6][200/250]  lr: 1.2500e-06  eta: 0:09:34  time: 0.2512  data_time: 0.0073  memory: 1907  grad_norm: 3.0795  loss: 0.6476  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6476
08/26 06:21:40 - mmengine - INFO - Epoch(train)  [6][220/250]  lr: 1.2500e-06  eta: 0:09:29  time: 0.2332  data_time: 0.0074  memory: 1907  grad_norm: 3.0841  loss: 0.6439  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.6439
08/26 06:21:45 - mmengine - INFO - Epoch(train)  [6][240/250]  lr: 1.2500e-06  eta: 0:09:24  time: 0.2511  data_time: 0.0072  memory: 1907  grad_norm: 2.8037  loss: 0.6584  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6584
08/26 06:21:47 - mmengine - INFO - Exp name: stgcnpp_enhanced_fight_detection_stable_20250826_061456
08/26 06:21:47 - mmengine - INFO - Epoch(train)  [6][250/250]  lr: 1.2500e-06  eta: 0:09:21  time: 0.2468  data_time: 0.0068  memory: 1907  grad_norm: 3.0355  loss: 0.6497  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.6497
08/26 06:21:49 - mmengine - INFO - Epoch(val)  [6][20/72]    eta: 0:00:04  time: 0.0918  data_time: 0.0105  memory: 383  
08/26 06:21:51 - mmengine - INFO - Epoch(val)  [6][40/72]    eta: 0:00:02  time: 0.0917  data_time: 0.0081  memory: 383  
08/26 06:21:53 - mmengine - INFO - Epoch(val)  [6][60/72]    eta: 0:00:01  time: 0.0866  data_time: 0.0082  memory: 383  
08/26 06:21:53 - mmengine - INFO - Epoch(val) [6][72/72]    acc/top1: 0.7065  acc/mean1: 0.6958  data_time: 0.0085  time: 0.0862
08/26 06:21:59 - mmengine - INFO - Epoch(train)  [7][ 20/250]  lr: 1.2194e-06  eta: 0:09:16  time: 0.2586  data_time: 0.0138  memory: 1907  grad_norm: 2.8518  loss: 0.6539  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6539
08/26 06:22:04 - mmengine - INFO - Epoch(train)  [7][ 40/250]  lr: 1.2194e-06  eta: 0:09:11  time: 0.2559  data_time: 0.0078  memory: 1907  grad_norm: 3.0703  loss: 0.6483  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6483
08/26 06:22:08 - mmengine - INFO - Epoch(train)  [7][ 60/250]  lr: 1.2194e-06  eta: 0:09:06  time: 0.2394  data_time: 0.0081  memory: 1907  grad_norm: 3.1019  loss: 0.6455  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6455
08/26 06:22:13 - mmengine - INFO - Epoch(train)  [7][ 80/250]  lr: 1.2194e-06  eta: 0:09:01  time: 0.2526  data_time: 0.0076  memory: 1907  grad_norm: 2.7730  loss: 0.6504  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6504
08/26 06:22:19 - mmengine - INFO - Epoch(train)  [7][100/250]  lr: 1.2194e-06  eta: 0:08:56  time: 0.2511  data_time: 0.0073  memory: 1907  grad_norm: 2.9669  loss: 0.6456  top1_acc: 0.8125  top5_acc: 1.0000  loss_cls: 0.6456
08/26 06:22:23 - mmengine - INFO - Epoch(train)  [7][120/250]  lr: 1.2194e-06  eta: 0:08:51  time: 0.2492  data_time: 0.0071  memory: 1907  grad_norm: 2.6581  loss: 0.6484  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6484
08/26 06:22:28 - mmengine - INFO - Epoch(train)  [7][140/250]  lr: 1.2194e-06  eta: 0:08:46  time: 0.2350  data_time: 0.0080  memory: 1907  grad_norm: 2.7166  loss: 0.6485  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6485
08/26 06:22:33 - mmengine - INFO - Epoch(train)  [7][160/250]  lr: 1.2194e-06  eta: 0:08:41  time: 0.2499  data_time: 0.0073  memory: 1907  grad_norm: 2.7600  loss: 0.6428  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6428
08/26 06:22:38 - mmengine - INFO - Epoch(train)  [7][180/250]  lr: 1.2194e-06  eta: 0:08:36  time: 0.2510  data_time: 0.0073  memory: 1907  grad_norm: 2.7640  loss: 0.6441  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.6441
08/26 06:22:43 - mmengine - INFO - Epoch(train)  [7][200/250]  lr: 1.2194e-06  eta: 0:08:31  time: 0.2349  data_time: 0.0076  memory: 1907  grad_norm: 2.5138  loss: 0.6371  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6371
08/26 06:22:48 - mmengine - INFO - Epoch(train)  [7][220/250]  lr: 1.2194e-06  eta: 0:08:26  time: 0.2526  data_time: 0.0076  memory: 1907  grad_norm: 2.7213  loss: 0.6369  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6369
08/26 06:22:53 - mmengine - INFO - Epoch(train)  [7][240/250]  lr: 1.2194e-06  eta: 0:08:21  time: 0.2509  data_time: 0.0074  memory: 1907  grad_norm: 2.7127  loss: 0.6362  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6362
08/26 06:22:55 - mmengine - INFO - Exp name: stgcnpp_enhanced_fight_detection_stable_20250826_061456
08/26 06:22:55 - mmengine - INFO - Epoch(train)  [7][250/250]  lr: 1.2194e-06  eta: 0:08:18  time: 0.2495  data_time: 0.0072  memory: 1907  grad_norm: 3.1407  loss: 0.6334  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.6334
08/26 06:22:57 - mmengine - INFO - Epoch(val)  [7][20/72]    eta: 0:00:04  time: 0.0788  data_time: 0.0108  memory: 383  
08/26 06:22:59 - mmengine - INFO - Epoch(val)  [7][40/72]    eta: 0:00:02  time: 0.0864  data_time: 0.0076  memory: 383  
08/26 06:23:00 - mmengine - INFO - Epoch(val)  [7][60/72]    eta: 0:00:01  time: 0.0861  data_time: 0.0075  memory: 383  
08/26 06:23:01 - mmengine - INFO - Epoch(val) [7][72/72]    acc/top1: 0.7302  acc/mean1: 0.7223  data_time: 0.0083  time: 0.0837
08/26 06:23:02 - mmengine - INFO - The previous best checkpoint /workspace/mmaction2/work_dirs/stgcnpp-bone-ntu60_rtmo-l_RWF2000plus_stable/best_acc_top1_epoch_4.pth is removed
08/26 06:23:02 - mmengine - INFO - The best checkpoint with 0.7302 acc/top1 at 7 epoch is saved to best_acc_top1_epoch_7.pth.
08/26 06:23:07 - mmengine - INFO - Epoch(train)  [8][ 20/250]  lr: 1.1308e-06  eta: 0:08:13  time: 0.2504  data_time: 0.0108  memory: 1907  grad_norm: 2.6002  loss: 0.6422  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6422
08/26 06:23:12 - mmengine - INFO - Epoch(train)  [8][ 40/250]  lr: 1.1308e-06  eta: 0:08:08  time: 0.2450  data_time: 0.0076  memory: 1907  grad_norm: 2.6685  loss: 0.6335  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.6335
08/26 06:23:17 - mmengine - INFO - Epoch(train)  [8][ 60/250]  lr: 1.1308e-06  eta: 0:08:03  time: 0.2503  data_time: 0.0072  memory: 1907  grad_norm: 2.8195  loss: 0.6299  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6299
08/26 06:23:22 - mmengine - INFO - Epoch(train)  [8][ 80/250]  lr: 1.1308e-06  eta: 0:07:58  time: 0.2491  data_time: 0.0073  memory: 1907  grad_norm: 2.4674  loss: 0.6413  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6413
08/26 06:23:27 - mmengine - INFO - Epoch(train)  [8][100/250]  lr: 1.1308e-06  eta: 0:07:53  time: 0.2329  data_time: 0.0075  memory: 1907  grad_norm: 2.7316  loss: 0.6227  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6227
08/26 06:23:32 - mmengine - INFO - Epoch(train)  [8][120/250]  lr: 1.1308e-06  eta: 0:07:48  time: 0.2509  data_time: 0.0074  memory: 1907  grad_norm: 2.8080  loss: 0.6332  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6332
08/26 06:23:37 - mmengine - INFO - Epoch(train)  [8][140/250]  lr: 1.1308e-06  eta: 0:07:43  time: 0.2514  data_time: 0.0075  memory: 1907  grad_norm: 3.0968  loss: 0.6338  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6338
08/26 06:23:41 - mmengine - INFO - Epoch(train)  [8][160/250]  lr: 1.1308e-06  eta: 0:07:38  time: 0.2375  data_time: 0.0080  memory: 1907  grad_norm: 2.6590  loss: 0.6219  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6219
08/26 06:23:46 - mmengine - INFO - Epoch(train)  [8][180/250]  lr: 1.1308e-06  eta: 0:07:33  time: 0.2503  data_time: 0.0078  memory: 1907  grad_norm: 2.4783  loss: 0.6425  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6425
08/26 06:23:51 - mmengine - INFO - Epoch(train)  [8][200/250]  lr: 1.1308e-06  eta: 0:07:28  time: 0.2555  data_time: 0.0078  memory: 1907  grad_norm: 2.4939  loss: 0.6331  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6331
08/26 06:23:56 - mmengine - INFO - Epoch(train)  [8][220/250]  lr: 1.1308e-06  eta: 0:07:23  time: 0.2467  data_time: 0.0077  memory: 1907  grad_norm: 2.4296  loss: 0.6381  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6381
08/26 06:24:01 - mmengine - INFO - Epoch(train)  [8][240/250]  lr: 1.1308e-06  eta: 0:07:18  time: 0.2452  data_time: 0.0075  memory: 1907  grad_norm: 2.5443  loss: 0.6425  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6425
08/26 06:24:04 - mmengine - INFO - Exp name: stgcnpp_enhanced_fight_detection_stable_20250826_061456
08/26 06:24:04 - mmengine - INFO - Epoch(train)  [8][250/250]  lr: 1.1308e-06  eta: 0:07:15  time: 0.2493  data_time: 0.0070  memory: 1907  grad_norm: 3.4777  loss: 0.6549  top1_acc: 0.0000  top5_acc: 1.0000  loss_cls: 0.6549
08/26 06:24:06 - mmengine - INFO - Epoch(val)  [8][20/72]    eta: 0:00:04  time: 0.0910  data_time: 0.0107  memory: 383  
08/26 06:24:07 - mmengine - INFO - Epoch(val)  [8][40/72]    eta: 0:00:02  time: 0.0861  data_time: 0.0074  memory: 383  
08/26 06:24:09 - mmengine - INFO - Epoch(val)  [8][60/72]    eta: 0:00:01  time: 0.0872  data_time: 0.0074  memory: 383  
08/26 06:24:10 - mmengine - INFO - Epoch(val) [8][72/72]    acc/top1: 0.7135  acc/mean1: 0.6993  data_time: 0.0082  time: 0.0870
08/26 06:24:15 - mmengine - INFO - Epoch(train)  [9][ 20/250]  lr: 9.9262e-07  eta: 0:07:10  time: 0.2440  data_time: 0.0117  memory: 1907  grad_norm: 2.7912  loss: 0.6282  top1_acc: 0.8125  top5_acc: 1.0000  loss_cls: 0.6282
08/26 06:24:20 - mmengine - INFO - Epoch(train)  [9][ 40/250]  lr: 9.9262e-07  eta: 0:07:05  time: 0.2496  data_time: 0.0073  memory: 1907  grad_norm: 2.5343  loss: 0.6339  top1_acc: 0.3750  top5_acc: 1.0000  loss_cls: 0.6339
08/26 06:24:25 - mmengine - INFO - Epoch(train)  [9][ 60/250]  lr: 9.9262e-07  eta: 0:07:00  time: 0.2554  data_time: 0.0075  memory: 1907  grad_norm: 2.5992  loss: 0.6276  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6276
08/26 06:24:30 - mmengine - INFO - Epoch(train)  [9][ 80/250]  lr: 9.9262e-07  eta: 0:06:55  time: 0.2363  data_time: 0.0077  memory: 1907  grad_norm: 3.0495  loss: 0.6253  top1_acc: 0.8125  top5_acc: 1.0000  loss_cls: 0.6253
08/26 06:24:35 - mmengine - INFO - Epoch(train)  [9][100/250]  lr: 9.9262e-07  eta: 0:06:50  time: 0.2533  data_time: 0.0078  memory: 1907  grad_norm: 2.3082  loss: 0.6277  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6277
08/26 06:24:40 - mmengine - INFO - Epoch(train)  [9][120/250]  lr: 9.9262e-07  eta: 0:06:45  time: 0.2547  data_time: 0.0077  memory: 1907  grad_norm: 2.8206  loss: 0.6097  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.6097
08/26 06:24:45 - mmengine - INFO - Epoch(train)  [9][140/250]  lr: 9.9262e-07  eta: 0:06:40  time: 0.2388  data_time: 0.0080  memory: 1907  grad_norm: 2.8996  loss: 0.6178  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.6178
08/26 06:24:50 - mmengine - INFO - Epoch(train)  [9][160/250]  lr: 9.9262e-07  eta: 0:06:35  time: 0.2529  data_time: 0.0081  memory: 1907  grad_norm: 2.4185  loss: 0.6389  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.6389
08/26 06:24:55 - mmengine - INFO - Epoch(train)  [9][180/250]  lr: 9.9262e-07  eta: 0:06:31  time: 0.2535  data_time: 0.0079  memory: 1907  grad_norm: 2.8914  loss: 0.6165  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6165
08/26 06:25:00 - mmengine - INFO - Epoch(train)  [9][200/250]  lr: 9.9262e-07  eta: 0:06:25  time: 0.2377  data_time: 0.0075  memory: 1907  grad_norm: 2.8426  loss: 0.6186  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.6186
08/26 06:25:05 - mmengine - INFO - Epoch(train)  [9][220/250]  lr: 9.9262e-07  eta: 0:06:20  time: 0.2554  data_time: 0.0074  memory: 1907  grad_norm: 2.4408  loss: 0.6449  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6449
08/26 06:25:10 - mmengine - INFO - Epoch(train)  [9][240/250]  lr: 9.9262e-07  eta: 0:06:16  time: 0.2547  data_time: 0.0074  memory: 1907  grad_norm: 2.6422  loss: 0.6324  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6324
08/26 06:25:12 - mmengine - INFO - Exp name: stgcnpp_enhanced_fight_detection_stable_20250826_061456
08/26 06:25:12 - mmengine - INFO - Epoch(train)  [9][250/250]  lr: 9.9262e-07  eta: 0:06:13  time: 0.2518  data_time: 0.0070  memory: 1907  grad_norm: 3.1801  loss: 0.6541  top1_acc: 0.0000  top5_acc: 1.0000  loss_cls: 0.6541
08/26 06:25:14 - mmengine - INFO - Epoch(val)  [9][20/72]    eta: 0:00:04  time: 0.0895  data_time: 0.0107  memory: 383  
08/26 06:25:16 - mmengine - INFO - Epoch(val)  [9][40/72]    eta: 0:00:02  time: 0.0798  data_time: 0.0084  memory: 383  
08/26 06:25:17 - mmengine - INFO - Epoch(val)  [9][60/72]    eta: 0:00:01  time: 0.0918  data_time: 0.0080  memory: 383  
08/26 06:25:19 - mmengine - INFO - Epoch(val) [9][72/72]    acc/top1: 0.6933  acc/mean1: 0.6740  data_time: 0.0087  time: 0.0868
08/26 06:25:24 - mmengine - INFO - Epoch(train) [10][ 20/250]  lr: 8.1857e-07  eta: 0:06:08  time: 0.2574  data_time: 0.0119  memory: 1907  grad_norm: 2.6326  loss: 0.6166  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6166
08/26 06:25:28 - mmengine - INFO - Epoch(train) [10][ 40/250]  lr: 8.1857e-07  eta: 0:06:03  time: 0.2393  data_time: 0.0080  memory: 1907  grad_norm: 2.5956  loss: 0.6319  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6319
08/26 06:25:33 - mmengine - INFO - Epoch(train) [10][ 60/250]  lr: 8.1857e-07  eta: 0:05:58  time: 0.2524  data_time: 0.0078  memory: 1907  grad_norm: 2.6955  loss: 0.6170  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6170
08/26 06:25:39 - mmengine - INFO - Epoch(train) [10][ 80/250]  lr: 8.1857e-07  eta: 0:05:53  time: 0.2516  data_time: 0.0077  memory: 1907  grad_norm: 2.4700  loss: 0.6198  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6198
08/26 06:25:44 - mmengine - INFO - Epoch(train) [10][100/250]  lr: 8.1857e-07  eta: 0:05:48  time: 0.2551  data_time: 0.0076  memory: 1907  grad_norm: 2.5726  loss: 0.6205  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6205
08/26 06:25:48 - mmengine - INFO - Epoch(train) [10][120/250]  lr: 8.1857e-07  eta: 0:05:43  time: 0.2360  data_time: 0.0077  memory: 1907  grad_norm: 2.3715  loss: 0.6309  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.6309
08/26 06:25:53 - mmengine - INFO - Epoch(train) [10][140/250]  lr: 8.1857e-07  eta: 0:05:38  time: 0.2535  data_time: 0.0075  memory: 1907  grad_norm: 2.3844  loss: 0.6264  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6264
08/26 06:25:58 - mmengine - INFO - Epoch(train) [10][160/250]  lr: 8.1857e-07  eta: 0:05:33  time: 0.2540  data_time: 0.0076  memory: 1907  grad_norm: 2.5881  loss: 0.6151  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6151
08/26 06:26:03 - mmengine - INFO - Epoch(train) [10][180/250]  lr: 8.1857e-07  eta: 0:05:28  time: 0.2345  data_time: 0.0076  memory: 1907  grad_norm: 2.6010  loss: 0.6305  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6305
08/26 06:26:08 - mmengine - INFO - Epoch(train) [10][200/250]  lr: 8.1857e-07  eta: 0:05:23  time: 0.2547  data_time: 0.0078  memory: 1907  grad_norm: 2.5596  loss: 0.6349  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6349
08/26 06:26:14 - mmengine - INFO - Epoch(train) [10][220/250]  lr: 8.1857e-07  eta: 0:05:18  time: 0.2718  data_time: 0.0082  memory: 1907  grad_norm: 2.7687  loss: 0.6140  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6140
08/26 06:26:19 - mmengine - INFO - Epoch(train) [10][240/250]  lr: 8.1857e-07  eta: 0:05:13  time: 0.2400  data_time: 0.0081  memory: 1907  grad_norm: 2.6257  loss: 0.6034  top1_acc: 0.8125  top5_acc: 1.0000  loss_cls: 0.6034
08/26 06:26:21 - mmengine - INFO - Exp name: stgcnpp_enhanced_fight_detection_stable_20250826_061456
08/26 06:26:21 - mmengine - INFO - Epoch(train) [10][250/250]  lr: 8.1857e-07  eta: 0:05:11  time: 0.2339  data_time: 0.0076  memory: 1907  grad_norm: 2.8319  loss: 0.5875  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.5875
08/26 06:26:21 - mmengine - INFO - Saving checkpoint at 10 epochs
08/26 06:26:23 - mmengine - INFO - Epoch(val) [10][20/72]    eta: 0:00:04  time: 0.0922  data_time: 0.0113  memory: 383  
08/26 06:26:25 - mmengine - INFO - Epoch(val) [10][40/72]    eta: 0:00:02  time: 0.0902  data_time: 0.0084  memory: 383  
08/26 06:26:27 - mmengine - INFO - Epoch(val) [10][60/72]    eta: 0:00:01  time: 0.0901  data_time: 0.0082  memory: 383  
08/26 06:26:28 - mmengine - INFO - Epoch(val) [10][72/72]    acc/top1: 0.7276  acc/mean1: 0.7154  data_time: 0.0089  time: 0.0896
08/26 06:26:32 - mmengine - INFO - Epoch(train) [11][ 20/250]  lr: 6.2563e-07  eta: 0:05:06  time: 0.2411  data_time: 0.0111  memory: 1907  grad_norm: 2.2121  loss: 0.6424  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6424
08/26 06:26:38 - mmengine - INFO - Epoch(train) [11][ 40/250]  lr: 6.2563e-07  eta: 0:05:01  time: 0.2603  data_time: 0.0077  memory: 1907  grad_norm: 2.7077  loss: 0.6146  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6146
08/26 06:26:43 - mmengine - INFO - Epoch(train) [11][ 60/250]  lr: 6.2563e-07  eta: 0:04:56  time: 0.2524  data_time: 0.0075  memory: 1907  grad_norm: 2.5701  loss: 0.6133  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6133
08/26 06:26:47 - mmengine - INFO - Epoch(train) [11][ 80/250]  lr: 6.2563e-07  eta: 0:04:51  time: 0.2371  data_time: 0.0079  memory: 1907  grad_norm: 2.7007  loss: 0.6084  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.6084
08/26 06:26:53 - mmengine - INFO - Epoch(train) [11][100/250]  lr: 6.2563e-07  eta: 0:04:46  time: 0.2552  data_time: 0.0080  memory: 1907  grad_norm: 2.6836  loss: 0.6257  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.6257
08/26 06:26:58 - mmengine - INFO - Epoch(train) [11][120/250]  lr: 6.2563e-07  eta: 0:04:41  time: 0.2518  data_time: 0.0076  memory: 1907  grad_norm: 2.4671  loss: 0.6150  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6150
08/26 06:27:02 - mmengine - INFO - Epoch(train) [11][140/250]  lr: 6.2563e-07  eta: 0:04:36  time: 0.2362  data_time: 0.0076  memory: 1907  grad_norm: 2.5124  loss: 0.6245  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6245
08/26 06:27:07 - mmengine - INFO - Epoch(train) [11][160/250]  lr: 6.2563e-07  eta: 0:04:31  time: 0.2538  data_time: 0.0081  memory: 1907  grad_norm: 2.3857  loss: 0.6161  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6161
08/26 06:27:12 - mmengine - INFO - Epoch(train) [11][180/250]  lr: 6.2563e-07  eta: 0:04:26  time: 0.2526  data_time: 0.0079  memory: 1907  grad_norm: 2.4983  loss: 0.6033  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6033
08/26 06:27:18 - mmengine - INFO - Epoch(train) [11][200/250]  lr: 6.2563e-07  eta: 0:04:21  time: 0.2525  data_time: 0.0080  memory: 1907  grad_norm: 2.3760  loss: 0.6163  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6163
08/26 06:27:22 - mmengine - INFO - Epoch(train) [11][220/250]  lr: 6.2563e-07  eta: 0:04:16  time: 0.2393  data_time: 0.0081  memory: 1907  grad_norm: 2.8934  loss: 0.5985  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.5985
08/26 06:27:27 - mmengine - INFO - Epoch(train) [11][240/250]  lr: 6.2563e-07  eta: 0:04:11  time: 0.2555  data_time: 0.0076  memory: 1907  grad_norm: 2.7935  loss: 0.6092  top1_acc: 0.8750  top5_acc: 1.0000  loss_cls: 0.6092
08/26 06:27:30 - mmengine - INFO - Exp name: stgcnpp_enhanced_fight_detection_stable_20250826_061456
08/26 06:27:30 - mmengine - INFO - Epoch(train) [11][250/250]  lr: 6.2563e-07  eta: 0:04:09  time: 0.2516  data_time: 0.0074  memory: 1907  grad_norm: 2.8093  loss: 0.6181  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.6181
08/26 06:27:32 - mmengine - INFO - Epoch(val) [11][20/72]    eta: 0:00:04  time: 0.0920  data_time: 0.0107  memory: 383  
08/26 06:27:33 - mmengine - INFO - Epoch(val) [11][40/72]    eta: 0:00:02  time: 0.0770  data_time: 0.0084  memory: 383  
08/26 06:27:35 - mmengine - INFO - Epoch(val) [11][60/72]    eta: 0:00:01  time: 0.0873  data_time: 0.0074  memory: 383  
08/26 06:27:36 - mmengine - INFO - Epoch(val) [11][72/72]    acc/top1: 0.7364  acc/mean1: 0.7271  data_time: 0.0084  time: 0.0849
08/26 06:27:36 - mmengine - INFO - The previous best checkpoint /workspace/mmaction2/work_dirs/stgcnpp-bone-ntu60_rtmo-l_RWF2000plus_stable/best_acc_top1_epoch_7.pth is removed
08/26 06:27:36 - mmengine - INFO - The best checkpoint with 0.7364 acc/top1 at 11 epoch is saved to best_acc_top1_epoch_11.pth.
08/26 06:27:41 - mmengine - INFO - Epoch(train) [12][ 20/250]  lr: 4.3268e-07  eta: 0:04:04  time: 0.2552  data_time: 0.0108  memory: 1907  grad_norm: 2.6155  loss: 0.6199  top1_acc: 0.3750  top5_acc: 1.0000  loss_cls: 0.6199
08/26 06:27:46 - mmengine - INFO - Epoch(train) [12][ 40/250]  lr: 4.3268e-07  eta: 0:03:59  time: 0.2322  data_time: 0.0074  memory: 1907  grad_norm: 2.4366  loss: 0.6184  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.6184
08/26 06:27:51 - mmengine - INFO - Epoch(train) [12][ 60/250]  lr: 4.3268e-07  eta: 0:03:54  time: 0.2509  data_time: 0.0075  memory: 1907  grad_norm: 2.6196  loss: 0.6198  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6198
08/26 06:27:56 - mmengine - INFO - Epoch(train) [12][ 80/250]  lr: 4.3268e-07  eta: 0:03:49  time: 0.2504  data_time: 0.0074  memory: 1907  grad_norm: 2.6309  loss: 0.6113  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6113
08/26 06:28:01 - mmengine - INFO - Epoch(train) [12][100/250]  lr: 4.3268e-07  eta: 0:03:44  time: 0.2504  data_time: 0.0074  memory: 1907  grad_norm: 2.4315  loss: 0.6109  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6109
08/26 06:28:06 - mmengine - INFO - Epoch(train) [12][120/250]  lr: 4.3268e-07  eta: 0:03:39  time: 0.2339  data_time: 0.0075  memory: 1907  grad_norm: 2.7897  loss: 0.6249  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6249
08/26 06:28:11 - mmengine - INFO - Epoch(train) [12][140/250]  lr: 4.3268e-07  eta: 0:03:34  time: 0.2502  data_time: 0.0074  memory: 1907  grad_norm: 2.2746  loss: 0.6100  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.6100
08/26 06:28:16 - mmengine - INFO - Epoch(train) [12][160/250]  lr: 4.3268e-07  eta: 0:03:29  time: 0.2518  data_time: 0.0074  memory: 1907  grad_norm: 2.5980  loss: 0.6037  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6037
08/26 06:28:21 - mmengine - INFO - Epoch(train) [12][180/250]  lr: 4.3268e-07  eta: 0:03:24  time: 0.2343  data_time: 0.0072  memory: 1907  grad_norm: 2.5229  loss: 0.6077  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6077
08/26 06:28:26 - mmengine - INFO - Epoch(train) [12][200/250]  lr: 4.3268e-07  eta: 0:03:19  time: 0.2508  data_time: 0.0073  memory: 1907  grad_norm: 2.7051  loss: 0.5957  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.5957
08/26 06:28:31 - mmengine - INFO - Epoch(train) [12][220/250]  lr: 4.3268e-07  eta: 0:03:14  time: 0.2508  data_time: 0.0073  memory: 1907  grad_norm: 2.6733  loss: 0.6203  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.6203
08/26 06:28:36 - mmengine - INFO - Epoch(train) [12][240/250]  lr: 4.3268e-07  eta: 0:03:09  time: 0.2490  data_time: 0.0072  memory: 1907  grad_norm: 2.4722  loss: 0.6221  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6221
08/26 06:28:38 - mmengine - INFO - Exp name: stgcnpp_enhanced_fight_detection_stable_20250826_061456
08/26 06:28:38 - mmengine - INFO - Epoch(train) [12][250/250]  lr: 4.3268e-07  eta: 0:03:06  time: 0.2326  data_time: 0.0073  memory: 1907  grad_norm: 2.7791  loss: 0.6155  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.6155
08/26 06:28:40 - mmengine - INFO - Epoch(val) [12][20/72]    eta: 0:00:04  time: 0.0901  data_time: 0.0098  memory: 383  
08/26 06:28:41 - mmengine - INFO - Epoch(val) [12][40/72]    eta: 0:00:02  time: 0.0868  data_time: 0.0074  memory: 383  
08/26 06:28:43 - mmengine - INFO - Epoch(val) [12][60/72]    eta: 0:00:01  time: 0.0877  data_time: 0.0074  memory: 383  
08/26 06:28:44 - mmengine - INFO - Epoch(val) [12][72/72]    acc/top1: 0.7443  acc/mean1: 0.7392  data_time: 0.0079  time: 0.0871
08/26 06:28:44 - mmengine - INFO - The previous best checkpoint /workspace/mmaction2/work_dirs/stgcnpp-bone-ntu60_rtmo-l_RWF2000plus_stable/best_acc_top1_epoch_11.pth is removed
08/26 06:28:44 - mmengine - INFO - The best checkpoint with 0.7443 acc/top1 at 12 epoch is saved to best_acc_top1_epoch_12.pth.
08/26 06:28:49 - mmengine - INFO - Epoch(train) [13][ 20/250]  lr: 2.5863e-07  eta: 0:03:01  time: 0.2370  data_time: 0.0104  memory: 1907  grad_norm: 2.5534  loss: 0.6225  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6225
08/26 06:28:54 - mmengine - INFO - Epoch(train) [13][ 40/250]  lr: 2.5863e-07  eta: 0:02:56  time: 0.2505  data_time: 0.0077  memory: 1907  grad_norm: 2.4239  loss: 0.5902  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.5902
08/26 06:28:59 - mmengine - INFO - Epoch(train) [13][ 60/250]  lr: 2.5863e-07  eta: 0:02:51  time: 0.2503  data_time: 0.0077  memory: 1907  grad_norm: 2.6064  loss: 0.6043  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6043
08/26 06:29:04 - mmengine - INFO - Epoch(train) [13][ 80/250]  lr: 2.5863e-07  eta: 0:02:46  time: 0.2428  data_time: 0.0076  memory: 1907  grad_norm: 2.2022  loss: 0.6140  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6140
08/26 06:29:09 - mmengine - INFO - Epoch(train) [13][100/250]  lr: 2.5863e-07  eta: 0:02:41  time: 0.2455  data_time: 0.0075  memory: 1907  grad_norm: 2.3397  loss: 0.5953  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.5953
08/26 06:29:14 - mmengine - INFO - Epoch(train) [13][120/250]  lr: 2.5863e-07  eta: 0:02:36  time: 0.2546  data_time: 0.0076  memory: 1907  grad_norm: 2.7756  loss: 0.6096  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6096
08/26 06:29:19 - mmengine - INFO - Epoch(train) [13][140/250]  lr: 2.5863e-07  eta: 0:02:31  time: 0.2602  data_time: 0.0076  memory: 1907  grad_norm: 2.4939  loss: 0.6073  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6073
08/26 06:29:24 - mmengine - INFO - Epoch(train) [13][160/250]  lr: 2.5863e-07  eta: 0:02:26  time: 0.2408  data_time: 0.0078  memory: 1907  grad_norm: 2.3041  loss: 0.5907  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.5907
08/26 06:29:29 - mmengine - INFO - Epoch(train) [13][180/250]  lr: 2.5863e-07  eta: 0:02:21  time: 0.2550  data_time: 0.0077  memory: 1907  grad_norm: 2.3490  loss: 0.6150  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.6150
08/26 06:29:34 - mmengine - INFO - Epoch(train) [13][200/250]  lr: 2.5863e-07  eta: 0:02:16  time: 0.2538  data_time: 0.0076  memory: 1907  grad_norm: 2.4482  loss: 0.6217  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.6217
08/26 06:29:39 - mmengine - INFO - Epoch(train) [13][220/250]  lr: 2.5863e-07  eta: 0:02:11  time: 0.2372  data_time: 0.0080  memory: 1907  grad_norm: 2.3849  loss: 0.6269  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6269
08/26 06:29:44 - mmengine - INFO - Epoch(train) [13][240/250]  lr: 2.5863e-07  eta: 0:02:06  time: 0.2537  data_time: 0.0078  memory: 1907  grad_norm: 2.5752  loss: 0.6026  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.6026
08/26 06:29:46 - mmengine - INFO - Exp name: stgcnpp_enhanced_fight_detection_stable_20250826_061456
08/26 06:29:46 - mmengine - INFO - Epoch(train) [13][250/250]  lr: 2.5863e-07  eta: 0:02:04  time: 0.2487  data_time: 0.0074  memory: 1907  grad_norm: 2.9099  loss: 0.6099  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.6099
08/26 06:29:48 - mmengine - INFO - Epoch(val) [13][20/72]    eta: 0:00:04  time: 0.0920  data_time: 0.0108  memory: 383  
08/26 06:29:50 - mmengine - INFO - Epoch(val) [13][40/72]    eta: 0:00:02  time: 0.0863  data_time: 0.0084  memory: 383  
08/26 06:29:52 - mmengine - INFO - Epoch(val) [13][60/72]    eta: 0:00:01  time: 0.0841  data_time: 0.0094  memory: 383  
08/26 06:29:53 - mmengine - INFO - Epoch(val) [13][72/72]    acc/top1: 0.7346  acc/mean1: 0.7226  data_time: 0.0092  time: 0.0869
08/26 06:29:58 - mmengine - INFO - Epoch(train) [14][ 20/250]  lr: 1.2050e-07  eta: 0:01:59  time: 0.2559  data_time: 0.0116  memory: 1907  grad_norm: 2.4292  loss: 0.6005  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6005
08/26 06:30:03 - mmengine - INFO - Epoch(train) [14][ 40/250]  lr: 1.2050e-07  eta: 0:01:54  time: 0.2516  data_time: 0.0074  memory: 1907  grad_norm: 2.3225  loss: 0.6135  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6135
08/26 06:30:08 - mmengine - INFO - Epoch(train) [14][ 60/250]  lr: 1.2050e-07  eta: 0:01:49  time: 0.2397  data_time: 0.0076  memory: 1907  grad_norm: 2.6153  loss: 0.5999  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.5999
08/26 06:30:13 - mmengine - INFO - Epoch(train) [14][ 80/250]  lr: 1.2050e-07  eta: 0:01:44  time: 0.2543  data_time: 0.0076  memory: 1907  grad_norm: 2.7183  loss: 0.6315  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6315
08/26 06:30:18 - mmengine - INFO - Epoch(train) [14][100/250]  lr: 1.2050e-07  eta: 0:01:39  time: 0.2534  data_time: 0.0074  memory: 1907  grad_norm: 2.5536  loss: 0.5930  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.5930
08/26 06:30:23 - mmengine - INFO - Epoch(train) [14][120/250]  lr: 1.2050e-07  eta: 0:01:34  time: 0.2383  data_time: 0.0076  memory: 1907  grad_norm: 2.3375  loss: 0.6095  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6095
08/26 06:30:28 - mmengine - INFO - Epoch(train) [14][140/250]  lr: 1.2050e-07  eta: 0:01:29  time: 0.2529  data_time: 0.0073  memory: 1907  grad_norm: 2.5254  loss: 0.6098  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.6098
08/26 06:30:33 - mmengine - INFO - Epoch(train) [14][160/250]  lr: 1.2050e-07  eta: 0:01:24  time: 0.2541  data_time: 0.0074  memory: 1907  grad_norm: 2.3773  loss: 0.6148  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6148
08/26 06:30:38 - mmengine - INFO - Epoch(train) [14][180/250]  lr: 1.2050e-07  eta: 0:01:19  time: 0.2469  data_time: 0.0078  memory: 1907  grad_norm: 2.7177  loss: 0.5944  top1_acc: 0.8750  top5_acc: 1.0000  loss_cls: 0.5944
08/26 06:30:43 - mmengine - INFO - Epoch(train) [14][200/250]  lr: 1.2050e-07  eta: 0:01:14  time: 0.2477  data_time: 0.0075  memory: 1907  grad_norm: 2.4846  loss: 0.6150  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6150
08/26 06:30:48 - mmengine - INFO - Epoch(train) [14][220/250]  lr: 1.2050e-07  eta: 0:01:09  time: 0.2555  data_time: 0.0079  memory: 1907  grad_norm: 2.2926  loss: 0.6013  top1_acc: 0.8125  top5_acc: 1.0000  loss_cls: 0.6013
08/26 06:30:53 - mmengine - INFO - Epoch(train) [14][240/250]  lr: 1.2050e-07  eta: 0:01:04  time: 0.2547  data_time: 0.0078  memory: 1907  grad_norm: 2.8809  loss: 0.6389  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6389
08/26 06:30:55 - mmengine - INFO - Exp name: stgcnpp_enhanced_fight_detection_stable_20250826_061456
08/26 06:30:55 - mmengine - INFO - Epoch(train) [14][250/250]  lr: 1.2050e-07  eta: 0:01:02  time: 0.2339  data_time: 0.0076  memory: 1907  grad_norm: 3.1267  loss: 0.6150  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.6150
08/26 06:30:57 - mmengine - INFO - Epoch(val) [14][20/72]    eta: 0:00:04  time: 0.0906  data_time: 0.0105  memory: 383  
08/26 06:30:59 - mmengine - INFO - Epoch(val) [14][40/72]    eta: 0:00:02  time: 0.0907  data_time: 0.0080  memory: 383  
08/26 06:31:00 - mmengine - INFO - Epoch(val) [14][60/72]    eta: 0:00:01  time: 0.0915  data_time: 0.0080  memory: 383  
08/26 06:31:02 - mmengine - INFO - Epoch(val) [14][72/72]    acc/top1: 0.7074  acc/mean1: 0.6881  data_time: 0.0085  time: 0.0901
08/26 06:31:07 - mmengine - INFO - Epoch(train) [15][ 20/250]  lr: 3.1809e-08  eta: 0:00:57  time: 0.2565  data_time: 0.0111  memory: 1907  grad_norm: 2.5507  loss: 0.6133  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6133
08/26 06:31:11 - mmengine - INFO - Epoch(train) [15][ 40/250]  lr: 3.1809e-08  eta: 0:00:52  time: 0.2389  data_time: 0.0079  memory: 1907  grad_norm: 2.4389  loss: 0.6054  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6054
08/26 06:31:17 - mmengine - INFO - Epoch(train) [15][ 60/250]  lr: 3.1809e-08  eta: 0:00:47  time: 0.2550  data_time: 0.0078  memory: 1907  grad_norm: 2.7626  loss: 0.6093  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6093
08/26 06:31:22 - mmengine - INFO - Epoch(train) [15][ 80/250]  lr: 3.1809e-08  eta: 0:00:42  time: 0.2538  data_time: 0.0080  memory: 1907  grad_norm: 2.5657  loss: 0.6106  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6106
08/26 06:31:26 - mmengine - INFO - Epoch(train) [15][100/250]  lr: 3.1809e-08  eta: 0:00:37  time: 0.2394  data_time: 0.0079  memory: 1907  grad_norm: 2.5972  loss: 0.6172  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6172
08/26 06:31:32 - mmengine - INFO - Epoch(train) [15][120/250]  lr: 3.1809e-08  eta: 0:00:32  time: 0.2553  data_time: 0.0077  memory: 1907  grad_norm: 2.3982  loss: 0.5959  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.5959
08/26 06:31:37 - mmengine - INFO - Epoch(train) [15][140/250]  lr: 3.1809e-08  eta: 0:00:27  time: 0.2533  data_time: 0.0073  memory: 1907  grad_norm: 2.4158  loss: 0.6035  top1_acc: 0.4375  top5_acc: 1.0000  loss_cls: 0.6035
08/26 06:31:41 - mmengine - INFO - Epoch(train) [15][160/250]  lr: 3.1809e-08  eta: 0:00:22  time: 0.2376  data_time: 0.0079  memory: 1907  grad_norm: 2.1697  loss: 0.5995  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.5995
08/26 06:31:46 - mmengine - INFO - Epoch(train) [15][180/250]  lr: 3.1809e-08  eta: 0:00:17  time: 0.2509  data_time: 0.0071  memory: 1907  grad_norm: 2.5857  loss: 0.6093  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.6093
08/26 06:31:51 - mmengine - INFO - Epoch(train) [15][200/250]  lr: 3.1809e-08  eta: 0:00:12  time: 0.2495  data_time: 0.0072  memory: 1907  grad_norm: 2.3578  loss: 0.6209  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6209
08/26 06:31:56 - mmengine - INFO - Epoch(train) [15][220/250]  lr: 3.1809e-08  eta: 0:00:07  time: 0.2323  data_time: 0.0074  memory: 1907  grad_norm: 2.5574  loss: 0.6051  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6051
08/26 06:32:01 - mmengine - INFO - Epoch(train) [15][240/250]  lr: 3.1809e-08  eta: 0:00:02  time: 0.2519  data_time: 0.0073  memory: 1907  grad_norm: 2.5639  loss: 0.6061  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6061
08/26 06:32:03 - mmengine - INFO - Exp name: stgcnpp_enhanced_fight_detection_stable_20250826_061456
08/26 06:32:03 - mmengine - INFO - Epoch(train) [15][250/250]  lr: 3.1809e-08  eta: 0:00:00  time: 0.2485  data_time: 0.0069  memory: 1907  grad_norm: 2.8306  loss: 0.6055  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.6055
08/26 06:32:03 - mmengine - INFO - Saving checkpoint at 15 epochs
08/26 06:32:05 - mmengine - INFO - Epoch(val) [15][20/72]    eta: 0:00:04  time: 0.0907  data_time: 0.0099  memory: 383  
08/26 06:32:07 - mmengine - INFO - Epoch(val) [15][40/72]    eta: 0:00:02  time: 0.0866  data_time: 0.0074  memory: 383  
08/26 06:32:09 - mmengine - INFO - Epoch(val) [15][60/72]    eta: 0:00:01  time: 0.0835  data_time: 0.0080  memory: 383  
08/26 06:32:10 - mmengine - INFO - Epoch(val) [15][72/72]    acc/top1: 0.7047  acc/mean1: 0.7090  data_time: 0.0082  time: 0.0838
