nohup: ignoring input
08/26 06:14:57 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.14 (main, May  6 2024, 19:42:50) [GCC 11.2.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 42
    GPU 0,1: NVIDIA RTX A5000
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 12.1, V12.1.105
    GCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
    PyTorch: 2.3.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.3.6 (Git Hash 86e6af5974177e513fd3fee58425e1063e7f1361)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 8.9.2
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=8.9.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.3.1, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

    TorchVision: 0.18.1
    OpenCV: 4.10.0
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 42
    deterministic: False
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

08/26 06:14:57 - mmengine - INFO - Config:
ann_file = 'data/skeleton/ntu60_2d.pkl'
ann_file_test = '/workspace/recognizer/output/RWF-2000/stage3_dataset/unknown_s0.2_n0.65_bytetrack_h0.3_l0.1_t0.2_split0.7-0.2-0.1/test.pkl'
ann_file_train = '/workspace/recognizer/output/RWF-2000/stage3_dataset/unknown_s0.2_n0.65_bytetrack_h0.3_l0.1_t0.2_split0.7-0.2-0.1/train.pkl'
ann_file_val = '/workspace/recognizer/output/RWF-2000/stage3_dataset/unknown_s0.2_n0.65_bytetrack_h0.3_l0.1_t0.2_split0.7-0.2-0.1/val.pkl'
auto_scale_lr = dict(base_batch_size=128, enable=True)
data_root = '/workspace/recognizer/test_data'
dataset_type = 'PoseDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=5, max_keep_ckpts=5, save_best='auto', type='CheckpointHook'),
    logger=dict(ignore_last=False, interval=20, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    runtime_info=dict(type='RuntimeInfoHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    sync_buffers=dict(type='SyncBuffersHook'),
    timer=dict(type='IterTimerHook'))
default_scope = 'mmaction'
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = '/workspace/mmaction2/checkpoints/stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-2d_20221228-cd11a691.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=20)
model = dict(
    backbone=dict(
        base_channels=48,
        down_stages=[
            3,
            5,
        ],
        gcn_adaptive='init',
        gcn_with_res=True,
        graph_cfg=dict(layout='coco', mode='spatial'),
        inflate_stages=[
            3,
            5,
        ],
        num_stages=6,
        tcn_type='mstcn',
        type='STGCN'),
    cls_head=dict(
        dropout=0.5,
        in_channels=192,
        loss_cls=dict(class_weight=[
            1.0,
            1.5,
        ], type='CrossEntropyLoss'),
        num_classes=2,
        type='GCNHead'),
    type='RecognizerGCN')
optim_wrapper = dict(
    clip_grad=dict(max_norm=1.0, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=1e-05,
        type='AdamW',
        weight_decay=0.005),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0,
        by_epoch=True,
        convert_to_iter_based=True,
        end=5,
        start_factor=0.01,
        type='LinearLR'),
    dict(
        T_max=10,
        begin=5,
        by_epoch=True,
        eta_min_ratio=0.001,
        type='CosineAnnealingLR'),
]
randomness = dict(deterministic=False, seed=42)
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=16,
    dataset=dict(
        ann_file=
        '/workspace/recognizer/output/RWF-2000/stage3_dataset/unknown_s0.2_n0.65_bytetrack_h0.3_l0.1_t0.2_split0.7-0.2-0.1/val.pkl',
        pipeline=[
            dict(type='PreNormalize2D'),
            dict(dataset='coco', feats=[
                'b',
            ], type='GenSkeFeat'),
            dict(
                clip_len=100,
                num_clips=1,
                test_mode=True,
                type='UniformSampleFrames'),
            dict(type='PoseDecode'),
            dict(num_person=4, type='FormatGCNInput'),
            dict(type='PackActionInputs'),
        ],
        test_mode=True,
        type='PoseDataset'),
    num_workers=8,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = [
    dict(
        metric_options=dict(
            mean_class_accuracy=dict(), top_k_accuracy=dict(topk=(1, ))),
        type='AccMetric'),
]
test_pipeline = [
    dict(type='PreNormalize2D'),
    dict(dataset='coco', feats=[
        'b',
    ], type='GenSkeFeat'),
    dict(
        clip_len=100, num_clips=1, test_mode=True, type='UniformSampleFrames'),
    dict(type='PoseDecode'),
    dict(num_person=4, type='FormatGCNInput'),
    dict(type='PackActionInputs'),
]
train_cfg = dict(
    max_epochs=15, type='EpochBasedTrainLoop', val_begin=1, val_interval=1)
train_dataloader = dict(
    batch_size=16,
    dataset=dict(
        ann_file=
        '/workspace/recognizer/output/RWF-2000/stage3_dataset/unknown_s0.2_n0.65_bytetrack_h0.3_l0.1_t0.2_split0.7-0.2-0.1/train.pkl',
        pipeline=[
            dict(type='PreNormalize2D'),
            dict(dataset='coco', feats=[
                'b',
            ], type='GenSkeFeat'),
            dict(clip_len=100, type='UniformSampleFrames'),
            dict(type='PoseDecode'),
            dict(num_person=4, type='FormatGCNInput'),
            dict(type='PackActionInputs'),
        ],
        test_mode=False,
        type='PoseDataset'),
    num_workers=8,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(type='PreNormalize2D'),
    dict(dataset='coco', feats=[
        'b',
    ], type='GenSkeFeat'),
    dict(clip_len=100, type='UniformSampleFrames'),
    dict(type='PoseDecode'),
    dict(num_person=4, type='FormatGCNInput'),
    dict(type='PackActionInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=16,
    dataset=dict(
        ann_file=
        '/workspace/recognizer/output/RWF-2000/stage3_dataset/unknown_s0.2_n0.65_bytetrack_h0.3_l0.1_t0.2_split0.7-0.2-0.1/val.pkl',
        pipeline=[
            dict(type='PreNormalize2D'),
            dict(dataset='coco', feats=[
                'b',
            ], type='GenSkeFeat'),
            dict(
                clip_len=100,
                num_clips=1,
                test_mode=True,
                type='UniformSampleFrames'),
            dict(type='PoseDecode'),
            dict(num_person=4, type='FormatGCNInput'),
            dict(type='PackActionInputs'),
        ],
        test_mode=True,
        type='PoseDataset'),
    num_workers=8,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = [
    dict(
        metric_options=dict(
            mean_class_accuracy=dict(), top_k_accuracy=dict(topk=(1, ))),
        type='AccMetric'),
]
val_pipeline = [
    dict(type='PreNormalize2D'),
    dict(dataset='coco', feats=[
        'b',
    ], type='GenSkeFeat'),
    dict(
        clip_len=100, num_clips=1, test_mode=True, type='UniformSampleFrames'),
    dict(type='PoseDecode'),
    dict(num_person=4, type='FormatGCNInput'),
    dict(type='PackActionInputs'),
]
vis_backends = [
    dict(type='LocalVisBackend'),
    dict(type='TensorboardVisBackend'),
]
visualizer = dict(
    type='ActionVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
        dict(type='TensorboardVisBackend'),
    ])
work_dir = '/workspace/mmaction2/work_dirs/stgcnpp-bone-ntu60_rtmo-l_RWF2000plus_stable'

08/26 06:14:58 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
08/26 06:14:58 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SyncBuffersHook                    
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SyncBuffersHook                    
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
08/26 06:14:59 - mmengine - INFO - 3985 videos remain after valid thresholding
08/26 06:14:59 - mmengine - INFO - LR is set based on batch size of 128 and the current batch size is 16. Scaling the original LR by 0.125.
08/26 06:14:59 - mmengine - INFO - 1138 videos remain after valid thresholding
Loads checkpoint by local backend from path: /workspace/mmaction2/checkpoints/stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-2d_20221228-cd11a691.pth
The model and loaded state dict do not match exactly

size mismatch for backbone.gcn.0.gcn.bn.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.0.gcn.bn.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.0.gcn.bn.running_mean: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.0.gcn.bn.running_var: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.0.gcn.conv.weight: copying a param with shape torch.Size([192, 3, 1, 1]) from checkpoint, the shape in current model is torch.Size([144, 3, 1, 1]).
size mismatch for backbone.gcn.0.gcn.conv.bias: copying a param with shape torch.Size([192]) from checkpoint, the shape in current model is torch.Size([144]).
size mismatch for backbone.gcn.0.gcn.down.0.weight: copying a param with shape torch.Size([64, 3, 1, 1]) from checkpoint, the shape in current model is torch.Size([48, 3, 1, 1]).
size mismatch for backbone.gcn.0.gcn.down.0.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.0.gcn.down.1.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.0.gcn.down.1.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.0.gcn.down.1.running_mean: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.0.gcn.down.1.running_var: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.0.tcn.branches.0.0.weight: copying a param with shape torch.Size([14, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([8, 48, 1, 1]).
size mismatch for backbone.gcn.0.tcn.branches.0.0.bias: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.0.1.weight: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.0.1.bias: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.0.1.running_mean: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.0.1.running_var: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.0.3.conv.weight: copying a param with shape torch.Size([14, 14, 3, 1]) from checkpoint, the shape in current model is torch.Size([8, 8, 3, 1]).
size mismatch for backbone.gcn.0.tcn.branches.0.3.conv.bias: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.1.0.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([8, 48, 1, 1]).
size mismatch for backbone.gcn.0.tcn.branches.1.0.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.1.1.weight: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.1.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.1.1.running_mean: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.1.1.running_var: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.1.3.conv.weight: copying a param with shape torch.Size([10, 10, 3, 1]) from checkpoint, the shape in current model is torch.Size([8, 8, 3, 1]).
size mismatch for backbone.gcn.0.tcn.branches.1.3.conv.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.2.0.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([8, 48, 1, 1]).
size mismatch for backbone.gcn.0.tcn.branches.2.0.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.2.1.weight: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.2.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.2.1.running_mean: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.2.1.running_var: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.2.3.conv.weight: copying a param with shape torch.Size([10, 10, 3, 1]) from checkpoint, the shape in current model is torch.Size([8, 8, 3, 1]).
size mismatch for backbone.gcn.0.tcn.branches.2.3.conv.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.3.0.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([8, 48, 1, 1]).
size mismatch for backbone.gcn.0.tcn.branches.3.0.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.3.1.weight: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.3.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.3.1.running_mean: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.3.1.running_var: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.3.3.conv.weight: copying a param with shape torch.Size([10, 10, 3, 1]) from checkpoint, the shape in current model is torch.Size([8, 8, 3, 1]).
size mismatch for backbone.gcn.0.tcn.branches.3.3.conv.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.4.0.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([8, 48, 1, 1]).
size mismatch for backbone.gcn.0.tcn.branches.4.0.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.4.1.weight: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.4.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.4.1.running_mean: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.4.1.running_var: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.branches.5.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([8, 48, 1, 1]).
size mismatch for backbone.gcn.0.tcn.branches.5.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.0.tcn.transform.0.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.0.tcn.transform.0.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.0.tcn.transform.0.running_mean: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.0.tcn.transform.0.running_var: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.0.tcn.transform.2.weight: copying a param with shape torch.Size([64, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([48, 48, 1, 1]).
size mismatch for backbone.gcn.0.tcn.transform.2.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.0.tcn.bn.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.0.tcn.bn.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.0.tcn.bn.running_mean: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.0.tcn.bn.running_var: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.1.gcn.bn.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.1.gcn.bn.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.1.gcn.bn.running_mean: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.1.gcn.bn.running_var: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.1.gcn.conv.weight: copying a param with shape torch.Size([192, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([144, 48, 1, 1]).
size mismatch for backbone.gcn.1.gcn.conv.bias: copying a param with shape torch.Size([192]) from checkpoint, the shape in current model is torch.Size([144]).
size mismatch for backbone.gcn.1.tcn.branches.0.0.weight: copying a param with shape torch.Size([14, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([8, 48, 1, 1]).
size mismatch for backbone.gcn.1.tcn.branches.0.0.bias: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.0.1.weight: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.0.1.bias: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.0.1.running_mean: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.0.1.running_var: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.0.3.conv.weight: copying a param with shape torch.Size([14, 14, 3, 1]) from checkpoint, the shape in current model is torch.Size([8, 8, 3, 1]).
size mismatch for backbone.gcn.1.tcn.branches.0.3.conv.bias: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.1.0.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([8, 48, 1, 1]).
size mismatch for backbone.gcn.1.tcn.branches.1.0.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.1.1.weight: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.1.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.1.1.running_mean: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.1.1.running_var: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.1.3.conv.weight: copying a param with shape torch.Size([10, 10, 3, 1]) from checkpoint, the shape in current model is torch.Size([8, 8, 3, 1]).
size mismatch for backbone.gcn.1.tcn.branches.1.3.conv.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.2.0.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([8, 48, 1, 1]).
size mismatch for backbone.gcn.1.tcn.branches.2.0.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.2.1.weight: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.2.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.2.1.running_mean: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.2.1.running_var: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.2.3.conv.weight: copying a param with shape torch.Size([10, 10, 3, 1]) from checkpoint, the shape in current model is torch.Size([8, 8, 3, 1]).
size mismatch for backbone.gcn.1.tcn.branches.2.3.conv.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.3.0.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([8, 48, 1, 1]).
size mismatch for backbone.gcn.1.tcn.branches.3.0.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.3.1.weight: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.3.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.3.1.running_mean: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.3.1.running_var: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.3.3.conv.weight: copying a param with shape torch.Size([10, 10, 3, 1]) from checkpoint, the shape in current model is torch.Size([8, 8, 3, 1]).
size mismatch for backbone.gcn.1.tcn.branches.3.3.conv.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.4.0.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([8, 48, 1, 1]).
size mismatch for backbone.gcn.1.tcn.branches.4.0.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.4.1.weight: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.4.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.4.1.running_mean: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.4.1.running_var: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.branches.5.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([8, 48, 1, 1]).
size mismatch for backbone.gcn.1.tcn.branches.5.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([8]).
size mismatch for backbone.gcn.1.tcn.transform.0.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.1.tcn.transform.0.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.1.tcn.transform.0.running_mean: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.1.tcn.transform.0.running_var: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.1.tcn.transform.2.weight: copying a param with shape torch.Size([64, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([48, 48, 1, 1]).
size mismatch for backbone.gcn.1.tcn.transform.2.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.1.tcn.bn.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.1.tcn.bn.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.1.tcn.bn.running_mean: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.1.tcn.bn.running_var: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([48]).
size mismatch for backbone.gcn.2.gcn.bn.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.2.gcn.bn.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.2.gcn.bn.running_mean: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.2.gcn.bn.running_var: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.2.gcn.conv.weight: copying a param with shape torch.Size([192, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([288, 48, 1, 1]).
size mismatch for backbone.gcn.2.gcn.conv.bias: copying a param with shape torch.Size([192]) from checkpoint, the shape in current model is torch.Size([288]).
size mismatch for backbone.gcn.2.tcn.branches.0.0.weight: copying a param with shape torch.Size([14, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([16, 96, 1, 1]).
size mismatch for backbone.gcn.2.tcn.branches.0.0.bias: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.0.1.weight: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.0.1.bias: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.0.1.running_mean: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.0.1.running_var: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.0.3.conv.weight: copying a param with shape torch.Size([14, 14, 3, 1]) from checkpoint, the shape in current model is torch.Size([16, 16, 3, 1]).
size mismatch for backbone.gcn.2.tcn.branches.0.3.conv.bias: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.1.0.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([16, 96, 1, 1]).
size mismatch for backbone.gcn.2.tcn.branches.1.0.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.1.1.weight: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.1.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.1.1.running_mean: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.1.1.running_var: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.1.3.conv.weight: copying a param with shape torch.Size([10, 10, 3, 1]) from checkpoint, the shape in current model is torch.Size([16, 16, 3, 1]).
size mismatch for backbone.gcn.2.tcn.branches.1.3.conv.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.2.0.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([16, 96, 1, 1]).
size mismatch for backbone.gcn.2.tcn.branches.2.0.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.2.1.weight: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.2.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.2.1.running_mean: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.2.1.running_var: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.2.3.conv.weight: copying a param with shape torch.Size([10, 10, 3, 1]) from checkpoint, the shape in current model is torch.Size([16, 16, 3, 1]).
size mismatch for backbone.gcn.2.tcn.branches.2.3.conv.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.3.0.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([16, 96, 1, 1]).
size mismatch for backbone.gcn.2.tcn.branches.3.0.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.3.1.weight: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.3.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.3.1.running_mean: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.3.1.running_var: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.3.3.conv.weight: copying a param with shape torch.Size([10, 10, 3, 1]) from checkpoint, the shape in current model is torch.Size([16, 16, 3, 1]).
size mismatch for backbone.gcn.2.tcn.branches.3.3.conv.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.4.0.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([16, 96, 1, 1]).
size mismatch for backbone.gcn.2.tcn.branches.4.0.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.4.1.weight: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.4.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.4.1.running_mean: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.4.1.running_var: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.branches.5.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([16, 96, 1, 1]).
size mismatch for backbone.gcn.2.tcn.branches.5.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.2.tcn.transform.0.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.2.tcn.transform.0.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.2.tcn.transform.0.running_mean: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.2.tcn.transform.0.running_var: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.2.tcn.transform.2.weight: copying a param with shape torch.Size([64, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([96, 96, 1, 1]).
size mismatch for backbone.gcn.2.tcn.transform.2.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.2.tcn.bn.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.2.tcn.bn.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.2.tcn.bn.running_mean: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.2.tcn.bn.running_var: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.3.gcn.bn.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.3.gcn.bn.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.3.gcn.bn.running_mean: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.3.gcn.bn.running_var: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.3.gcn.conv.weight: copying a param with shape torch.Size([192, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([288, 96, 1, 1]).
size mismatch for backbone.gcn.3.gcn.conv.bias: copying a param with shape torch.Size([192]) from checkpoint, the shape in current model is torch.Size([288]).
size mismatch for backbone.gcn.3.tcn.branches.0.0.weight: copying a param with shape torch.Size([14, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([16, 96, 1, 1]).
size mismatch for backbone.gcn.3.tcn.branches.0.0.bias: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.0.1.weight: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.0.1.bias: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.0.1.running_mean: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.0.1.running_var: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.0.3.conv.weight: copying a param with shape torch.Size([14, 14, 3, 1]) from checkpoint, the shape in current model is torch.Size([16, 16, 3, 1]).
size mismatch for backbone.gcn.3.tcn.branches.0.3.conv.bias: copying a param with shape torch.Size([14]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.1.0.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([16, 96, 1, 1]).
size mismatch for backbone.gcn.3.tcn.branches.1.0.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.1.1.weight: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.1.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.1.1.running_mean: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.1.1.running_var: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.1.3.conv.weight: copying a param with shape torch.Size([10, 10, 3, 1]) from checkpoint, the shape in current model is torch.Size([16, 16, 3, 1]).
size mismatch for backbone.gcn.3.tcn.branches.1.3.conv.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.2.0.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([16, 96, 1, 1]).
size mismatch for backbone.gcn.3.tcn.branches.2.0.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.2.1.weight: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.2.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.2.1.running_mean: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.2.1.running_var: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.2.3.conv.weight: copying a param with shape torch.Size([10, 10, 3, 1]) from checkpoint, the shape in current model is torch.Size([16, 16, 3, 1]).
size mismatch for backbone.gcn.3.tcn.branches.2.3.conv.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.3.0.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([16, 96, 1, 1]).
size mismatch for backbone.gcn.3.tcn.branches.3.0.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.3.1.weight: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.3.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.3.1.running_mean: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.3.1.running_var: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.3.3.conv.weight: copying a param with shape torch.Size([10, 10, 3, 1]) from checkpoint, the shape in current model is torch.Size([16, 16, 3, 1]).
size mismatch for backbone.gcn.3.tcn.branches.3.3.conv.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.4.0.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([16, 96, 1, 1]).
size mismatch for backbone.gcn.3.tcn.branches.4.0.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.4.1.weight: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.4.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.4.1.running_mean: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.4.1.running_var: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.branches.5.weight: copying a param with shape torch.Size([10, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([16, 96, 1, 1]).
size mismatch for backbone.gcn.3.tcn.branches.5.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for backbone.gcn.3.tcn.transform.0.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.3.tcn.transform.0.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.3.tcn.transform.0.running_mean: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.3.tcn.transform.0.running_var: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.3.tcn.transform.2.weight: copying a param with shape torch.Size([64, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([96, 96, 1, 1]).
size mismatch for backbone.gcn.3.tcn.transform.2.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.3.tcn.bn.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.3.tcn.bn.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.3.tcn.bn.running_mean: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.3.tcn.bn.running_var: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([96]).
size mismatch for backbone.gcn.4.gcn.bn.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.gcn.bn.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.gcn.bn.running_mean: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.gcn.bn.running_var: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.gcn.conv.weight: copying a param with shape torch.Size([384, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([576, 96, 1, 1]).
size mismatch for backbone.gcn.4.gcn.conv.bias: copying a param with shape torch.Size([384]) from checkpoint, the shape in current model is torch.Size([576]).
size mismatch for backbone.gcn.4.gcn.down.0.weight: copying a param with shape torch.Size([128, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([192, 96, 1, 1]).
size mismatch for backbone.gcn.4.gcn.down.0.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.gcn.down.1.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.gcn.down.1.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.gcn.down.1.running_mean: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.gcn.down.1.running_var: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.tcn.branches.0.0.weight: copying a param with shape torch.Size([23, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([32, 192, 1, 1]).
size mismatch for backbone.gcn.4.tcn.branches.0.0.bias: copying a param with shape torch.Size([23]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.0.1.weight: copying a param with shape torch.Size([23]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.0.1.bias: copying a param with shape torch.Size([23]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.0.1.running_mean: copying a param with shape torch.Size([23]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.0.1.running_var: copying a param with shape torch.Size([23]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.0.3.conv.weight: copying a param with shape torch.Size([23, 23, 3, 1]) from checkpoint, the shape in current model is torch.Size([32, 32, 3, 1]).
size mismatch for backbone.gcn.4.tcn.branches.0.3.conv.bias: copying a param with shape torch.Size([23]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.1.0.weight: copying a param with shape torch.Size([21, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([32, 192, 1, 1]).
size mismatch for backbone.gcn.4.tcn.branches.1.0.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.1.1.weight: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.1.1.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.1.1.running_mean: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.1.1.running_var: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.1.3.conv.weight: copying a param with shape torch.Size([21, 21, 3, 1]) from checkpoint, the shape in current model is torch.Size([32, 32, 3, 1]).
size mismatch for backbone.gcn.4.tcn.branches.1.3.conv.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.2.0.weight: copying a param with shape torch.Size([21, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([32, 192, 1, 1]).
size mismatch for backbone.gcn.4.tcn.branches.2.0.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.2.1.weight: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.2.1.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.2.1.running_mean: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.2.1.running_var: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.2.3.conv.weight: copying a param with shape torch.Size([21, 21, 3, 1]) from checkpoint, the shape in current model is torch.Size([32, 32, 3, 1]).
size mismatch for backbone.gcn.4.tcn.branches.2.3.conv.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.3.0.weight: copying a param with shape torch.Size([21, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([32, 192, 1, 1]).
size mismatch for backbone.gcn.4.tcn.branches.3.0.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.3.1.weight: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.3.1.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.3.1.running_mean: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.3.1.running_var: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.3.3.conv.weight: copying a param with shape torch.Size([21, 21, 3, 1]) from checkpoint, the shape in current model is torch.Size([32, 32, 3, 1]).
size mismatch for backbone.gcn.4.tcn.branches.3.3.conv.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.4.0.weight: copying a param with shape torch.Size([21, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([32, 192, 1, 1]).
size mismatch for backbone.gcn.4.tcn.branches.4.0.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.4.1.weight: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.4.1.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.4.1.running_mean: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.4.1.running_var: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.branches.5.weight: copying a param with shape torch.Size([21, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([32, 192, 1, 1]).
size mismatch for backbone.gcn.4.tcn.branches.5.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.4.tcn.transform.0.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.tcn.transform.0.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.tcn.transform.0.running_mean: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.tcn.transform.0.running_var: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.tcn.transform.2.weight: copying a param with shape torch.Size([128, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([192, 192, 1, 1]).
size mismatch for backbone.gcn.4.tcn.transform.2.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.tcn.bn.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.tcn.bn.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.tcn.bn.running_mean: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.tcn.bn.running_var: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.residual.conv.weight: copying a param with shape torch.Size([128, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([192, 96, 1, 1]).
size mismatch for backbone.gcn.4.residual.conv.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.residual.bn.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.residual.bn.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.residual.bn.running_mean: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.4.residual.bn.running_var: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.5.gcn.bn.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.5.gcn.bn.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.5.gcn.bn.running_mean: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.5.gcn.bn.running_var: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.5.gcn.conv.weight: copying a param with shape torch.Size([384, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([576, 192, 1, 1]).
size mismatch for backbone.gcn.5.gcn.conv.bias: copying a param with shape torch.Size([384]) from checkpoint, the shape in current model is torch.Size([576]).
size mismatch for backbone.gcn.5.tcn.branches.0.0.weight: copying a param with shape torch.Size([23, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([32, 192, 1, 1]).
size mismatch for backbone.gcn.5.tcn.branches.0.0.bias: copying a param with shape torch.Size([23]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.0.1.weight: copying a param with shape torch.Size([23]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.0.1.bias: copying a param with shape torch.Size([23]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.0.1.running_mean: copying a param with shape torch.Size([23]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.0.1.running_var: copying a param with shape torch.Size([23]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.0.3.conv.weight: copying a param with shape torch.Size([23, 23, 3, 1]) from checkpoint, the shape in current model is torch.Size([32, 32, 3, 1]).
size mismatch for backbone.gcn.5.tcn.branches.0.3.conv.bias: copying a param with shape torch.Size([23]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.1.0.weight: copying a param with shape torch.Size([21, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([32, 192, 1, 1]).
size mismatch for backbone.gcn.5.tcn.branches.1.0.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.1.1.weight: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.1.1.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.1.1.running_mean: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.1.1.running_var: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.1.3.conv.weight: copying a param with shape torch.Size([21, 21, 3, 1]) from checkpoint, the shape in current model is torch.Size([32, 32, 3, 1]).
size mismatch for backbone.gcn.5.tcn.branches.1.3.conv.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.2.0.weight: copying a param with shape torch.Size([21, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([32, 192, 1, 1]).
size mismatch for backbone.gcn.5.tcn.branches.2.0.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.2.1.weight: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.2.1.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.2.1.running_mean: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.2.1.running_var: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.2.3.conv.weight: copying a param with shape torch.Size([21, 21, 3, 1]) from checkpoint, the shape in current model is torch.Size([32, 32, 3, 1]).
size mismatch for backbone.gcn.5.tcn.branches.2.3.conv.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.3.0.weight: copying a param with shape torch.Size([21, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([32, 192, 1, 1]).
size mismatch for backbone.gcn.5.tcn.branches.3.0.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.3.1.weight: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.3.1.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.3.1.running_mean: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.3.1.running_var: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.3.3.conv.weight: copying a param with shape torch.Size([21, 21, 3, 1]) from checkpoint, the shape in current model is torch.Size([32, 32, 3, 1]).
size mismatch for backbone.gcn.5.tcn.branches.3.3.conv.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.4.0.weight: copying a param with shape torch.Size([21, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([32, 192, 1, 1]).
size mismatch for backbone.gcn.5.tcn.branches.4.0.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.4.1.weight: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.4.1.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.4.1.running_mean: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.4.1.running_var: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.branches.5.weight: copying a param with shape torch.Size([21, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([32, 192, 1, 1]).
size mismatch for backbone.gcn.5.tcn.branches.5.bias: copying a param with shape torch.Size([21]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for backbone.gcn.5.tcn.transform.0.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.5.tcn.transform.0.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.5.tcn.transform.0.running_mean: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.5.tcn.transform.0.running_var: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.5.tcn.transform.2.weight: copying a param with shape torch.Size([128, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([192, 192, 1, 1]).
size mismatch for backbone.gcn.5.tcn.transform.2.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.5.tcn.bn.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.5.tcn.bn.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.5.tcn.bn.running_mean: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for backbone.gcn.5.tcn.bn.running_var: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([192]).
size mismatch for cls_head.fc.weight: copying a param with shape torch.Size([60, 256]) from checkpoint, the shape in current model is torch.Size([2, 192]).
size mismatch for cls_head.fc.bias: copying a param with shape torch.Size([60]) from checkpoint, the shape in current model is torch.Size([2]).
unexpected key in source state_dict: backbone.gcn.6.gcn.A, backbone.gcn.6.gcn.bn.weight, backbone.gcn.6.gcn.bn.bias, backbone.gcn.6.gcn.bn.running_mean, backbone.gcn.6.gcn.bn.running_var, backbone.gcn.6.gcn.bn.num_batches_tracked, backbone.gcn.6.gcn.conv.weight, backbone.gcn.6.gcn.conv.bias, backbone.gcn.6.tcn.branches.0.0.weight, backbone.gcn.6.tcn.branches.0.0.bias, backbone.gcn.6.tcn.branches.0.1.weight, backbone.gcn.6.tcn.branches.0.1.bias, backbone.gcn.6.tcn.branches.0.1.running_mean, backbone.gcn.6.tcn.branches.0.1.running_var, backbone.gcn.6.tcn.branches.0.1.num_batches_tracked, backbone.gcn.6.tcn.branches.0.3.conv.weight, backbone.gcn.6.tcn.branches.0.3.conv.bias, backbone.gcn.6.tcn.branches.1.0.weight, backbone.gcn.6.tcn.branches.1.0.bias, backbone.gcn.6.tcn.branches.1.1.weight, backbone.gcn.6.tcn.branches.1.1.bias, backbone.gcn.6.tcn.branches.1.1.running_mean, backbone.gcn.6.tcn.branches.1.1.running_var, backbone.gcn.6.tcn.branches.1.1.num_batches_tracked, backbone.gcn.6.tcn.branches.1.3.conv.weight, backbone.gcn.6.tcn.branches.1.3.conv.bias, backbone.gcn.6.tcn.branches.2.0.weight, backbone.gcn.6.tcn.branches.2.0.bias, backbone.gcn.6.tcn.branches.2.1.weight, backbone.gcn.6.tcn.branches.2.1.bias, backbone.gcn.6.tcn.branches.2.1.running_mean, backbone.gcn.6.tcn.branches.2.1.running_var, backbone.gcn.6.tcn.branches.2.1.num_batches_tracked, backbone.gcn.6.tcn.branches.2.3.conv.weight, backbone.gcn.6.tcn.branches.2.3.conv.bias, backbone.gcn.6.tcn.branches.3.0.weight, backbone.gcn.6.tcn.branches.3.0.bias, backbone.gcn.6.tcn.branches.3.1.weight, backbone.gcn.6.tcn.branches.3.1.bias, backbone.gcn.6.tcn.branches.3.1.running_mean, backbone.gcn.6.tcn.branches.3.1.running_var, backbone.gcn.6.tcn.branches.3.1.num_batches_tracked, backbone.gcn.6.tcn.branches.3.3.conv.weight, backbone.gcn.6.tcn.branches.3.3.conv.bias, backbone.gcn.6.tcn.branches.4.0.weight, backbone.gcn.6.tcn.branches.4.0.bias, backbone.gcn.6.tcn.branches.4.1.weight, backbone.gcn.6.tcn.branches.4.1.bias, backbone.gcn.6.tcn.branches.4.1.running_mean, backbone.gcn.6.tcn.branches.4.1.running_var, backbone.gcn.6.tcn.branches.4.1.num_batches_tracked, backbone.gcn.6.tcn.branches.5.weight, backbone.gcn.6.tcn.branches.5.bias, backbone.gcn.6.tcn.transform.0.weight, backbone.gcn.6.tcn.transform.0.bias, backbone.gcn.6.tcn.transform.0.running_mean, backbone.gcn.6.tcn.transform.0.running_var, backbone.gcn.6.tcn.transform.0.num_batches_tracked, backbone.gcn.6.tcn.transform.2.weight, backbone.gcn.6.tcn.transform.2.bias, backbone.gcn.6.tcn.bn.weight, backbone.gcn.6.tcn.bn.bias, backbone.gcn.6.tcn.bn.running_mean, backbone.gcn.6.tcn.bn.running_var, backbone.gcn.6.tcn.bn.num_batches_tracked, backbone.gcn.7.gcn.A, backbone.gcn.7.gcn.bn.weight, backbone.gcn.7.gcn.bn.bias, backbone.gcn.7.gcn.bn.running_mean, backbone.gcn.7.gcn.bn.running_var, backbone.gcn.7.gcn.bn.num_batches_tracked, backbone.gcn.7.gcn.conv.weight, backbone.gcn.7.gcn.conv.bias, backbone.gcn.7.gcn.down.0.weight, backbone.gcn.7.gcn.down.0.bias, backbone.gcn.7.gcn.down.1.weight, backbone.gcn.7.gcn.down.1.bias, backbone.gcn.7.gcn.down.1.running_mean, backbone.gcn.7.gcn.down.1.running_var, backbone.gcn.7.gcn.down.1.num_batches_tracked, backbone.gcn.7.tcn.branches.0.0.weight, backbone.gcn.7.tcn.branches.0.0.bias, backbone.gcn.7.tcn.branches.0.1.weight, backbone.gcn.7.tcn.branches.0.1.bias, backbone.gcn.7.tcn.branches.0.1.running_mean, backbone.gcn.7.tcn.branches.0.1.running_var, backbone.gcn.7.tcn.branches.0.1.num_batches_tracked, backbone.gcn.7.tcn.branches.0.3.conv.weight, backbone.gcn.7.tcn.branches.0.3.conv.bias, backbone.gcn.7.tcn.branches.1.0.weight, backbone.gcn.7.tcn.branches.1.0.bias, backbone.gcn.7.tcn.branches.1.1.weight, backbone.gcn.7.tcn.branches.1.1.bias, backbone.gcn.7.tcn.branches.1.1.running_mean, backbone.gcn.7.tcn.branches.1.1.running_var, backbone.gcn.7.tcn.branches.1.1.num_batches_tracked, backbone.gcn.7.tcn.branches.1.3.conv.weight, backbone.gcn.7.tcn.branches.1.3.conv.bias, backbone.gcn.7.tcn.branches.2.0.weight, backbone.gcn.7.tcn.branches.2.0.bias, backbone.gcn.7.tcn.branches.2.1.weight, backbone.gcn.7.tcn.branches.2.1.bias, backbone.gcn.7.tcn.branches.2.1.running_mean, backbone.gcn.7.tcn.branches.2.1.running_var, backbone.gcn.7.tcn.branches.2.1.num_batches_tracked, backbone.gcn.7.tcn.branches.2.3.conv.weight, backbone.gcn.7.tcn.branches.2.3.conv.bias, backbone.gcn.7.tcn.branches.3.0.weight, backbone.gcn.7.tcn.branches.3.0.bias, backbone.gcn.7.tcn.branches.3.1.weight, backbone.gcn.7.tcn.branches.3.1.bias, backbone.gcn.7.tcn.branches.3.1.running_mean, backbone.gcn.7.tcn.branches.3.1.running_var, backbone.gcn.7.tcn.branches.3.1.num_batches_tracked, backbone.gcn.7.tcn.branches.3.3.conv.weight, backbone.gcn.7.tcn.branches.3.3.conv.bias, backbone.gcn.7.tcn.branches.4.0.weight, backbone.gcn.7.tcn.branches.4.0.bias, backbone.gcn.7.tcn.branches.4.1.weight, backbone.gcn.7.tcn.branches.4.1.bias, backbone.gcn.7.tcn.branches.4.1.running_mean, backbone.gcn.7.tcn.branches.4.1.running_var, backbone.gcn.7.tcn.branches.4.1.num_batches_tracked, backbone.gcn.7.tcn.branches.5.weight, backbone.gcn.7.tcn.branches.5.bias, backbone.gcn.7.tcn.transform.0.weight, backbone.gcn.7.tcn.transform.0.bias, backbone.gcn.7.tcn.transform.0.running_mean, backbone.gcn.7.tcn.transform.0.running_var, backbone.gcn.7.tcn.transform.0.num_batches_tracked, backbone.gcn.7.tcn.transform.2.weight, backbone.gcn.7.tcn.transform.2.bias, backbone.gcn.7.tcn.bn.weight, backbone.gcn.7.tcn.bn.bias, backbone.gcn.7.tcn.bn.running_mean, backbone.gcn.7.tcn.bn.running_var, backbone.gcn.7.tcn.bn.num_batches_tracked, backbone.gcn.7.residual.conv.weight, backbone.gcn.7.residual.conv.bias, backbone.gcn.7.residual.bn.weight, backbone.gcn.7.residual.bn.bias, backbone.gcn.7.residual.bn.running_mean, backbone.gcn.7.residual.bn.running_var, backbone.gcn.7.residual.bn.num_batches_tracked, backbone.gcn.8.gcn.A, backbone.gcn.8.gcn.bn.weight, backbone.gcn.8.gcn.bn.bias, backbone.gcn.8.gcn.bn.running_mean, backbone.gcn.8.gcn.bn.running_var, backbone.gcn.8.gcn.bn.num_batches_tracked, backbone.gcn.8.gcn.conv.weight, backbone.gcn.8.gcn.conv.bias, backbone.gcn.8.tcn.branches.0.0.weight, backbone.gcn.8.tcn.branches.0.0.bias, backbone.gcn.8.tcn.branches.0.1.weight, backbone.gcn.8.tcn.branches.0.1.bias, backbone.gcn.8.tcn.branches.0.1.running_mean, backbone.gcn.8.tcn.branches.0.1.running_var, backbone.gcn.8.tcn.branches.0.1.num_batches_tracked, backbone.gcn.8.tcn.branches.0.3.conv.weight, backbone.gcn.8.tcn.branches.0.3.conv.bias, backbone.gcn.8.tcn.branches.1.0.weight, backbone.gcn.8.tcn.branches.1.0.bias, backbone.gcn.8.tcn.branches.1.1.weight, backbone.gcn.8.tcn.branches.1.1.bias, backbone.gcn.8.tcn.branches.1.1.running_mean, backbone.gcn.8.tcn.branches.1.1.running_var, backbone.gcn.8.tcn.branches.1.1.num_batches_tracked, backbone.gcn.8.tcn.branches.1.3.conv.weight, backbone.gcn.8.tcn.branches.1.3.conv.bias, backbone.gcn.8.tcn.branches.2.0.weight, backbone.gcn.8.tcn.branches.2.0.bias, backbone.gcn.8.tcn.branches.2.1.weight, backbone.gcn.8.tcn.branches.2.1.bias, backbone.gcn.8.tcn.branches.2.1.running_mean, backbone.gcn.8.tcn.branches.2.1.running_var, backbone.gcn.8.tcn.branches.2.1.num_batches_tracked, backbone.gcn.8.tcn.branches.2.3.conv.weight, backbone.gcn.8.tcn.branches.2.3.conv.bias, backbone.gcn.8.tcn.branches.3.0.weight, backbone.gcn.8.tcn.branches.3.0.bias, backbone.gcn.8.tcn.branches.3.1.weight, backbone.gcn.8.tcn.branches.3.1.bias, backbone.gcn.8.tcn.branches.3.1.running_mean, backbone.gcn.8.tcn.branches.3.1.running_var, backbone.gcn.8.tcn.branches.3.1.num_batches_tracked, backbone.gcn.8.tcn.branches.3.3.conv.weight, backbone.gcn.8.tcn.branches.3.3.conv.bias, backbone.gcn.8.tcn.branches.4.0.weight, backbone.gcn.8.tcn.branches.4.0.bias, backbone.gcn.8.tcn.branches.4.1.weight, backbone.gcn.8.tcn.branches.4.1.bias, backbone.gcn.8.tcn.branches.4.1.running_mean, backbone.gcn.8.tcn.branches.4.1.running_var, backbone.gcn.8.tcn.branches.4.1.num_batches_tracked, backbone.gcn.8.tcn.branches.5.weight, backbone.gcn.8.tcn.branches.5.bias, backbone.gcn.8.tcn.transform.0.weight, backbone.gcn.8.tcn.transform.0.bias, backbone.gcn.8.tcn.transform.0.running_mean, backbone.gcn.8.tcn.transform.0.running_var, backbone.gcn.8.tcn.transform.0.num_batches_tracked, backbone.gcn.8.tcn.transform.2.weight, backbone.gcn.8.tcn.transform.2.bias, backbone.gcn.8.tcn.bn.weight, backbone.gcn.8.tcn.bn.bias, backbone.gcn.8.tcn.bn.running_mean, backbone.gcn.8.tcn.bn.running_var, backbone.gcn.8.tcn.bn.num_batches_tracked, backbone.gcn.9.gcn.A, backbone.gcn.9.gcn.bn.weight, backbone.gcn.9.gcn.bn.bias, backbone.gcn.9.gcn.bn.running_mean, backbone.gcn.9.gcn.bn.running_var, backbone.gcn.9.gcn.bn.num_batches_tracked, backbone.gcn.9.gcn.conv.weight, backbone.gcn.9.gcn.conv.bias, backbone.gcn.9.tcn.branches.0.0.weight, backbone.gcn.9.tcn.branches.0.0.bias, backbone.gcn.9.tcn.branches.0.1.weight, backbone.gcn.9.tcn.branches.0.1.bias, backbone.gcn.9.tcn.branches.0.1.running_mean, backbone.gcn.9.tcn.branches.0.1.running_var, backbone.gcn.9.tcn.branches.0.1.num_batches_tracked, backbone.gcn.9.tcn.branches.0.3.conv.weight, backbone.gcn.9.tcn.branches.0.3.conv.bias, backbone.gcn.9.tcn.branches.1.0.weight, backbone.gcn.9.tcn.branches.1.0.bias, backbone.gcn.9.tcn.branches.1.1.weight, backbone.gcn.9.tcn.branches.1.1.bias, backbone.gcn.9.tcn.branches.1.1.running_mean, backbone.gcn.9.tcn.branches.1.1.running_var, backbone.gcn.9.tcn.branches.1.1.num_batches_tracked, backbone.gcn.9.tcn.branches.1.3.conv.weight, backbone.gcn.9.tcn.branches.1.3.conv.bias, backbone.gcn.9.tcn.branches.2.0.weight, backbone.gcn.9.tcn.branches.2.0.bias, backbone.gcn.9.tcn.branches.2.1.weight, backbone.gcn.9.tcn.branches.2.1.bias, backbone.gcn.9.tcn.branches.2.1.running_mean, backbone.gcn.9.tcn.branches.2.1.running_var, backbone.gcn.9.tcn.branches.2.1.num_batches_tracked, backbone.gcn.9.tcn.branches.2.3.conv.weight, backbone.gcn.9.tcn.branches.2.3.conv.bias, backbone.gcn.9.tcn.branches.3.0.weight, backbone.gcn.9.tcn.branches.3.0.bias, backbone.gcn.9.tcn.branches.3.1.weight, backbone.gcn.9.tcn.branches.3.1.bias, backbone.gcn.9.tcn.branches.3.1.running_mean, backbone.gcn.9.tcn.branches.3.1.running_var, backbone.gcn.9.tcn.branches.3.1.num_batches_tracked, backbone.gcn.9.tcn.branches.3.3.conv.weight, backbone.gcn.9.tcn.branches.3.3.conv.bias, backbone.gcn.9.tcn.branches.4.0.weight, backbone.gcn.9.tcn.branches.4.0.bias, backbone.gcn.9.tcn.branches.4.1.weight, backbone.gcn.9.tcn.branches.4.1.bias, backbone.gcn.9.tcn.branches.4.1.running_mean, backbone.gcn.9.tcn.branches.4.1.running_var, backbone.gcn.9.tcn.branches.4.1.num_batches_tracked, backbone.gcn.9.tcn.branches.5.weight, backbone.gcn.9.tcn.branches.5.bias, backbone.gcn.9.tcn.transform.0.weight, backbone.gcn.9.tcn.transform.0.bias, backbone.gcn.9.tcn.transform.0.running_mean, backbone.gcn.9.tcn.transform.0.running_var, backbone.gcn.9.tcn.transform.0.num_batches_tracked, backbone.gcn.9.tcn.transform.2.weight, backbone.gcn.9.tcn.transform.2.bias, backbone.gcn.9.tcn.bn.weight, backbone.gcn.9.tcn.bn.bias, backbone.gcn.9.tcn.bn.running_mean, backbone.gcn.9.tcn.bn.running_var, backbone.gcn.9.tcn.bn.num_batches_tracked

missing keys in source state_dict: backbone.gcn.2.gcn.down.0.weight, backbone.gcn.2.gcn.down.0.bias, backbone.gcn.2.gcn.down.1.weight, backbone.gcn.2.gcn.down.1.bias, backbone.gcn.2.gcn.down.1.running_mean, backbone.gcn.2.gcn.down.1.running_var, backbone.gcn.2.residual.conv.weight, backbone.gcn.2.residual.conv.bias, backbone.gcn.2.residual.bn.weight, backbone.gcn.2.residual.bn.bias, backbone.gcn.2.residual.bn.running_mean, backbone.gcn.2.residual.bn.running_var

08/26 06:15:00 - mmengine - INFO - Load checkpoint from /workspace/mmaction2/checkpoints/stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-2d_20221228-cd11a691.pth
08/26 06:15:00 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
08/26 06:15:00 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
08/26 06:15:00 - mmengine - INFO - Checkpoints will be saved to /workspace/mmaction2/work_dirs/stgcnpp-bone-ntu60_rtmo-l_RWF2000plus_stable.
08/26 06:15:08 - mmengine - INFO - Epoch(train)  [1][ 20/250]  lr: 3.1325e-08  eta: 0:26:21  time: 0.4240  data_time: 0.0245  memory: 2174  grad_norm: 3.6974  loss: 0.6973  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6973
08/26 06:15:13 - mmengine - INFO - Epoch(train)  [1][ 40/250]  lr: 5.1141e-08  eta: 0:20:20  time: 0.2340  data_time: 0.0076  memory: 1907  grad_norm: 3.9032  loss: 0.6992  top1_acc: 0.4375  top5_acc: 1.0000  loss_cls: 0.6992
08/26 06:15:18 - mmengine - INFO - Epoch(train)  [1][ 60/250]  lr: 7.0957e-08  eta: 0:18:37  time: 0.2505  data_time: 0.0074  memory: 1907  grad_norm: 3.6817  loss: 0.6923  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6923
08/26 06:15:23 - mmengine - INFO - Epoch(train)  [1][ 80/250]  lr: 9.0773e-08  eta: 0:17:43  time: 0.2501  data_time: 0.0074  memory: 1907  grad_norm: 3.8107  loss: 0.6997  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6997
08/26 06:15:28 - mmengine - INFO - Epoch(train)  [1][100/250]  lr: 1.1059e-07  eta: 0:16:56  time: 0.2335  data_time: 0.0074  memory: 1907  grad_norm: 3.0651  loss: 0.6930  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6930
08/26 06:15:33 - mmengine - INFO - Epoch(train)  [1][120/250]  lr: 1.3040e-07  eta: 0:16:33  time: 0.2500  data_time: 0.0073  memory: 1907  grad_norm: 3.3210  loss: 0.6954  top1_acc: 0.2500  top5_acc: 1.0000  loss_cls: 0.6954
08/26 06:15:38 - mmengine - INFO - Epoch(train)  [1][140/250]  lr: 1.5022e-07  eta: 0:16:15  time: 0.2502  data_time: 0.0073  memory: 1907  grad_norm: 3.6050  loss: 0.6936  top1_acc: 0.3125  top5_acc: 1.0000  loss_cls: 0.6936
08/26 06:15:43 - mmengine - INFO - Epoch(train)  [1][160/250]  lr: 1.7004e-07  eta: 0:16:02  time: 0.2527  data_time: 0.0075  memory: 1907  grad_norm: 3.7789  loss: 0.6940  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6940
08/26 06:15:47 - mmengine - INFO - Epoch(train)  [1][180/250]  lr: 1.8985e-07  eta: 0:15:43  time: 0.2326  data_time: 0.0075  memory: 1907  grad_norm: 3.6542  loss: 0.6904  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6904
08/26 06:15:52 - mmengine - INFO - Epoch(train)  [1][200/250]  lr: 2.0967e-07  eta: 0:15:32  time: 0.2497  data_time: 0.0076  memory: 1907  grad_norm: 3.8371  loss: 0.6993  top1_acc: 0.3750  top5_acc: 1.0000  loss_cls: 0.6993
08/26 06:15:57 - mmengine - INFO - Epoch(train)  [1][220/250]  lr: 2.2948e-07  eta: 0:15:23  time: 0.2502  data_time: 0.0072  memory: 1907  grad_norm: 3.2248  loss: 0.6901  top1_acc: 0.4375  top5_acc: 1.0000  loss_cls: 0.6901
08/26 06:16:02 - mmengine - INFO - Epoch(train)  [1][240/250]  lr: 2.4930e-07  eta: 0:15:09  time: 0.2312  data_time: 0.0073  memory: 1907  grad_norm: 3.8548  loss: 0.6985  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.6985
08/26 06:16:06 - mmengine - INFO - Exp name: stgcnpp_enhanced_fight_detection_stable_20250826_061456
08/26 06:16:06 - mmengine - INFO - Epoch(train)  [1][250/250]  lr: 2.5921e-07  eta: 0:15:30  time: 0.3208  data_time: 0.0070  memory: 1907  grad_norm: 3.8208  loss: 0.6917  top1_acc: 0.0000  top5_acc: 1.0000  loss_cls: 0.6917
08/26 06:16:08 - mmengine - INFO - Epoch(val)  [1][20/72]    eta: 0:00:05  time: 0.1048  data_time: 0.0221  memory: 383  
08/26 06:16:10 - mmengine - INFO - Epoch(val)  [1][40/72]    eta: 0:00:03  time: 0.0878  data_time: 0.0082  memory: 383  
08/26 06:16:12 - mmengine - INFO - Epoch(val)  [1][60/72]    eta: 0:00:01  time: 0.0784  data_time: 0.0082  memory: 383  
08/26 06:16:13 - mmengine - INFO - Epoch(val) [1][72/72]    acc/top1: 0.5123  acc/mean1: 0.5463  data_time: 0.0120  time: 0.0974
08/26 06:16:13 - mmengine - INFO - The best checkpoint with 0.5123 acc/top1 at 1 epoch is saved to best_acc_top1_epoch_1.pth.
08/26 06:16:19 - mmengine - INFO - Epoch(train)  [2][ 20/250]  lr: 2.7902e-07  eta: 0:15:22  time: 0.2551  data_time: 0.0108  memory: 1907  grad_norm: 3.7116  loss: 0.6939  top1_acc: 0.3125  top5_acc: 1.0000  loss_cls: 0.6939
08/26 06:16:24 - mmengine - INFO - Epoch(train)  [2][ 40/250]  lr: 2.9884e-07  eta: 0:15:14  time: 0.2550  data_time: 0.0078  memory: 1907  grad_norm: 3.3478  loss: 0.6936  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6936
08/26 06:16:28 - mmengine - INFO - Epoch(train)  [2][ 60/250]  lr: 3.1865e-07  eta: 0:15:03  time: 0.2363  data_time: 0.0079  memory: 1907  grad_norm: 3.3578  loss: 0.6893  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6893
08/26 06:16:33 - mmengine - INFO - Epoch(train)  [2][ 80/250]  lr: 3.3847e-07  eta: 0:14:56  time: 0.2560  data_time: 0.0081  memory: 1907  grad_norm: 3.4717  loss: 0.6904  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6904
08/26 06:16:39 - mmengine - INFO - Epoch(train)  [2][100/250]  lr: 3.5829e-07  eta: 0:14:49  time: 0.2531  data_time: 0.0076  memory: 1907  grad_norm: 3.1495  loss: 0.6868  top1_acc: 0.3750  top5_acc: 1.0000  loss_cls: 0.6868
08/26 06:16:43 - mmengine - INFO - Epoch(train)  [2][120/250]  lr: 3.7810e-07  eta: 0:14:39  time: 0.2332  data_time: 0.0074  memory: 1907  grad_norm: 3.4611  loss: 0.6887  top1_acc: 0.4375  top5_acc: 1.0000  loss_cls: 0.6887
08/26 06:16:48 - mmengine - INFO - Epoch(train)  [2][140/250]  lr: 3.9792e-07  eta: 0:14:32  time: 0.2538  data_time: 0.0075  memory: 1907  grad_norm: 3.7045  loss: 0.6949  top1_acc: 0.3750  top5_acc: 1.0000  loss_cls: 0.6949
08/26 06:16:53 - mmengine - INFO - Epoch(train)  [2][160/250]  lr: 4.1773e-07  eta: 0:14:26  time: 0.2512  data_time: 0.0072  memory: 1907  grad_norm: 3.5673  loss: 0.6898  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6898
08/26 06:16:58 - mmengine - INFO - Epoch(train)  [2][180/250]  lr: 4.3755e-07  eta: 0:14:18  time: 0.2426  data_time: 0.0074  memory: 1907  grad_norm: 3.2714  loss: 0.6979  top1_acc: 0.3750  top5_acc: 1.0000  loss_cls: 0.6979
08/26 06:17:03 - mmengine - INFO - Epoch(train)  [2][200/250]  lr: 4.5737e-07  eta: 0:14:11  time: 0.2461  data_time: 0.0078  memory: 1907  grad_norm: 3.7504  loss: 0.6820  top1_acc: 0.3750  top5_acc: 1.0000  loss_cls: 0.6820
08/26 06:17:08 - mmengine - INFO - Epoch(train)  [2][220/250]  lr: 4.7718e-07  eta: 0:14:05  time: 0.2491  data_time: 0.0076  memory: 1907  grad_norm: 3.5749  loss: 0.6950  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6950
08/26 06:17:13 - mmengine - INFO - Epoch(train)  [2][240/250]  lr: 4.9700e-07  eta: 0:13:58  time: 0.2482  data_time: 0.0075  memory: 1907  grad_norm: 3.3741  loss: 0.6860  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6860
08/26 06:17:15 - mmengine - INFO - Exp name: stgcnpp_enhanced_fight_detection_stable_20250826_061456
08/26 06:17:15 - mmengine - INFO - Epoch(train)  [2][250/250]  lr: 5.0691e-07  eta: 0:13:53  time: 0.2290  data_time: 0.0072  memory: 1907  grad_norm: 3.6153  loss: 0.6884  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.6884
08/26 06:17:17 - mmengine - INFO - Epoch(val)  [2][20/72]    eta: 0:00:04  time: 0.0916  data_time: 0.0105  memory: 383  
08/26 06:17:19 - mmengine - INFO - Epoch(val)  [2][40/72]    eta: 0:00:02  time: 0.0873  data_time: 0.0079  memory: 383  
08/26 06:17:20 - mmengine - INFO - Epoch(val)  [2][60/72]    eta: 0:00:01  time: 0.0859  data_time: 0.0079  memory: 383  
08/26 06:17:21 - mmengine - INFO - Epoch(val) [2][72/72]    acc/top1: 0.5633  acc/mean1: 0.5900  data_time: 0.0084  time: 0.0953
08/26 06:17:21 - mmengine - INFO - The previous best checkpoint /workspace/mmaction2/work_dirs/stgcnpp-bone-ntu60_rtmo-l_RWF2000plus_stable/best_acc_top1_epoch_1.pth is removed
08/26 06:17:22 - mmengine - INFO - The best checkpoint with 0.5633 acc/top1 at 2 epoch is saved to best_acc_top1_epoch_2.pth.
08/26 06:17:27 - mmengine - INFO - Epoch(train)  [3][ 20/250]  lr: 5.2672e-07  eta: 0:13:47  time: 0.2507  data_time: 0.0094  memory: 1907  grad_norm: 3.4749  loss: 0.6861  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6861
08/26 06:17:31 - mmengine - INFO - Epoch(train)  [3][ 40/250]  lr: 5.4654e-07  eta: 0:13:39  time: 0.2337  data_time: 0.0073  memory: 1907  grad_norm: 3.3698  loss: 0.6898  top1_acc: 0.2500  top5_acc: 1.0000  loss_cls: 0.6898
08/26 06:17:36 - mmengine - INFO - Epoch(train)  [3][ 60/250]  lr: 5.6635e-07  eta: 0:13:34  time: 0.2542  data_time: 0.0074  memory: 1907  grad_norm: 3.4629  loss: 0.6780  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6780
08/26 06:17:41 - mmengine - INFO - Epoch(train)  [3][ 80/250]  lr: 5.8617e-07  eta: 0:13:28  time: 0.2492  data_time: 0.0073  memory: 1907  grad_norm: 2.9477  loss: 0.6883  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6883
08/26 06:17:46 - mmengine - INFO - Epoch(train)  [3][100/250]  lr: 6.0598e-07  eta: 0:13:21  time: 0.2334  data_time: 0.0073  memory: 1907  grad_norm: 3.3674  loss: 0.6885  top1_acc: 0.3750  top5_acc: 1.0000  loss_cls: 0.6885
08/26 06:17:51 - mmengine - INFO - Epoch(train)  [3][120/250]  lr: 6.2580e-07  eta: 0:13:15  time: 0.2490  data_time: 0.0072  memory: 1907  grad_norm: 3.3601  loss: 0.6794  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6794
08/26 06:17:56 - mmengine - INFO - Epoch(train)  [3][140/250]  lr: 6.4562e-07  eta: 0:13:09  time: 0.2485  data_time: 0.0072  memory: 1907  grad_norm: 3.5817  loss: 0.6832  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6832
08/26 06:18:01 - mmengine - INFO - Epoch(train)  [3][160/250]  lr: 6.6543e-07  eta: 0:13:02  time: 0.2329  data_time: 0.0076  memory: 1907  grad_norm: 3.2082  loss: 0.6817  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6817
08/26 06:18:06 - mmengine - INFO - Epoch(train)  [3][180/250]  lr: 6.8525e-07  eta: 0:12:57  time: 0.2505  data_time: 0.0074  memory: 1907  grad_norm: 3.2192  loss: 0.6833  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6833
08/26 06:18:11 - mmengine - INFO - Epoch(train)  [3][200/250]  lr: 7.0506e-07  eta: 0:12:52  time: 0.2491  data_time: 0.0072  memory: 1907  grad_norm: 3.3402  loss: 0.6867  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6867
08/26 06:18:16 - mmengine - INFO - Epoch(train)  [3][220/250]  lr: 7.2488e-07  eta: 0:12:46  time: 0.2496  data_time: 0.0072  memory: 1907  grad_norm: 3.4499  loss: 0.6823  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6823
08/26 06:18:20 - mmengine - INFO - Epoch(train)  [3][240/250]  lr: 7.4470e-07  eta: 0:12:39  time: 0.2327  data_time: 0.0072  memory: 1907  grad_norm: 3.4951  loss: 0.6828  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6828
08/26 06:18:23 - mmengine - INFO - Exp name: stgcnpp_enhanced_fight_detection_stable_20250826_061456
08/26 06:18:23 - mmengine - INFO - Epoch(train)  [3][250/250]  lr: 7.5460e-07  eta: 0:12:37  time: 0.2479  data_time: 0.0070  memory: 1907  grad_norm: 3.8054  loss: 0.6773  top1_acc: 0.0000  top5_acc: 1.0000  loss_cls: 0.6773
08/26 06:18:25 - mmengine - INFO - Epoch(val)  [3][20/72]    eta: 0:00:04  time: 0.0916  data_time: 0.0105  memory: 383  
08/26 06:18:26 - mmengine - INFO - Epoch(val)  [3][40/72]    eta: 0:00:02  time: 0.0864  data_time: 0.0075  memory: 383  
08/26 06:18:28 - mmengine - INFO - Epoch(val)  [3][60/72]    eta: 0:00:01  time: 0.0874  data_time: 0.0077  memory: 383  
08/26 06:18:29 - mmengine - INFO - Epoch(val) [3][72/72]    acc/top1: 0.6801  acc/mean1: 0.6900  data_time: 0.0083  time: 0.0871
08/26 06:18:29 - mmengine - INFO - The previous best checkpoint /workspace/mmaction2/work_dirs/stgcnpp-bone-ntu60_rtmo-l_RWF2000plus_stable/best_acc_top1_epoch_2.pth is removed
08/26 06:18:29 - mmengine - INFO - The best checkpoint with 0.6801 acc/top1 at 3 epoch is saved to best_acc_top1_epoch_3.pth.
08/26 06:18:34 - mmengine - INFO - Epoch(train)  [4][ 20/250]  lr: 7.7442e-07  eta: 0:12:31  time: 0.2489  data_time: 0.0104  memory: 1907  grad_norm: 3.7228  loss: 0.6884  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6884
08/26 06:18:39 - mmengine - INFO - Epoch(train)  [4][ 40/250]  lr: 7.9424e-07  eta: 0:12:26  time: 0.2522  data_time: 0.0075  memory: 1907  grad_norm: 3.6867  loss: 0.6776  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6776
08/26 06:18:44 - mmengine - INFO - Epoch(train)  [4][ 60/250]  lr: 8.1405e-07  eta: 0:12:21  time: 0.2493  data_time: 0.0075  memory: 1907  grad_norm: 3.3796  loss: 0.6823  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6823
08/26 06:18:49 - mmengine - INFO - Epoch(train)  [4][ 80/250]  lr: 8.3387e-07  eta: 0:12:15  time: 0.2362  data_time: 0.0075  memory: 1907  grad_norm: 3.2265  loss: 0.6750  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6750
08/26 06:18:54 - mmengine - INFO - Epoch(train)  [4][100/250]  lr: 8.5368e-07  eta: 0:12:10  time: 0.2553  data_time: 0.0076  memory: 1907  grad_norm: 3.1946  loss: 0.6789  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6789
08/26 06:18:59 - mmengine - INFO - Epoch(train)  [4][120/250]  lr: 8.7350e-07  eta: 0:12:05  time: 0.2535  data_time: 0.0073  memory: 1907  grad_norm: 3.4596  loss: 0.6798  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6798
08/26 06:19:04 - mmengine - INFO - Epoch(train)  [4][140/250]  lr: 8.9331e-07  eta: 0:11:59  time: 0.2348  data_time: 0.0074  memory: 1907  grad_norm: 2.9448  loss: 0.6732  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6732
08/26 06:19:09 - mmengine - INFO - Epoch(train)  [4][160/250]  lr: 9.1313e-07  eta: 0:11:54  time: 0.2524  data_time: 0.0073  memory: 1907  grad_norm: 3.3699  loss: 0.6702  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6702
08/26 06:19:14 - mmengine - INFO - Epoch(train)  [4][180/250]  lr: 9.3295e-07  eta: 0:11:49  time: 0.2501  data_time: 0.0072  memory: 1907  grad_norm: 3.0780  loss: 0.6709  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6709
08/26 06:19:19 - mmengine - INFO - Epoch(train)  [4][200/250]  lr: 9.5276e-07  eta: 0:11:43  time: 0.2427  data_time: 0.0071  memory: 1907  grad_norm: 3.2598  loss: 0.6776  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.6776
08/26 06:19:24 - mmengine - INFO - Epoch(train)  [4][220/250]  lr: 9.7258e-07  eta: 0:11:38  time: 0.2435  data_time: 0.0072  memory: 1907  grad_norm: 3.1036  loss: 0.6651  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6651
08/26 06:19:29 - mmengine - INFO - Epoch(train)  [4][240/250]  lr: 9.9239e-07  eta: 0:11:33  time: 0.2494  data_time: 0.0071  memory: 1907  grad_norm: 3.3498  loss: 0.6722  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6722
08/26 06:19:31 - mmengine - INFO - Exp name: stgcnpp_enhanced_fight_detection_stable_20250826_061456
08/26 06:19:31 - mmengine - INFO - Epoch(train)  [4][250/250]  lr: 1.0023e-06  eta: 0:11:30  time: 0.2455  data_time: 0.0068  memory: 1907  grad_norm: 3.3586  loss: 0.6733  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.6733
08/26 06:19:33 - mmengine - INFO - Epoch(val)  [4][20/72]    eta: 0:00:04  time: 0.0891  data_time: 0.0101  memory: 383  
08/26 06:19:34 - mmengine - INFO - Epoch(val)  [4][40/72]    eta: 0:00:02  time: 0.0746  data_time: 0.0077  memory: 383  
08/26 06:19:36 - mmengine - INFO - Epoch(val)  [4][60/72]    eta: 0:00:01  time: 0.0885  data_time: 0.0078  memory: 383  
08/26 06:19:37 - mmengine - INFO - Epoch(val) [4][72/72]    acc/top1: 0.7241  acc/mean1: 0.7192  data_time: 0.0082  time: 0.0836
08/26 06:19:37 - mmengine - INFO - The previous best checkpoint /workspace/mmaction2/work_dirs/stgcnpp-bone-ntu60_rtmo-l_RWF2000plus_stable/best_acc_top1_epoch_3.pth is removed
08/26 06:19:37 - mmengine - INFO - The best checkpoint with 0.7241 acc/top1 at 4 epoch is saved to best_acc_top1_epoch_4.pth.
08/26 06:19:42 - mmengine - INFO - Epoch(train)  [5][ 20/250]  lr: 1.0221e-06  eta: 0:11:25  time: 0.2546  data_time: 0.0100  memory: 1907  grad_norm: 3.0941  loss: 0.6599  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6599
08/26 06:19:48 - mmengine - INFO - Epoch(train)  [5][ 40/250]  lr: 1.0419e-06  eta: 0:11:20  time: 0.2532  data_time: 0.0079  memory: 1907  grad_norm: 3.6632  loss: 0.6723  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6723
08/26 06:19:52 - mmengine - INFO - Epoch(train)  [5][ 60/250]  lr: 1.0617e-06  eta: 0:11:14  time: 0.2361  data_time: 0.0076  memory: 1907  grad_norm: 3.1411  loss: 0.6600  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6600
08/26 06:19:57 - mmengine - INFO - Epoch(train)  [5][ 80/250]  lr: 1.0816e-06  eta: 0:11:09  time: 0.2534  data_time: 0.0076  memory: 1907  grad_norm: 3.0902  loss: 0.6606  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6606
08/26 06:20:02 - mmengine - INFO - Epoch(train)  [5][100/250]  lr: 1.1014e-06  eta: 0:11:05  time: 0.2524  data_time: 0.0079  memory: 1907  grad_norm: 2.7292  loss: 0.6676  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6676
08/26 06:20:07 - mmengine - INFO - Epoch(train)  [5][120/250]  lr: 1.1212e-06  eta: 0:10:59  time: 0.2367  data_time: 0.0079  memory: 1907  grad_norm: 3.0416  loss: 0.6602  top1_acc: 0.4375  top5_acc: 1.0000  loss_cls: 0.6602
08/26 06:20:12 - mmengine - INFO - Epoch(train)  [5][140/250]  lr: 1.1410e-06  eta: 0:10:54  time: 0.2538  data_time: 0.0079  memory: 1907  grad_norm: 3.1955  loss: 0.6593  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6593
08/26 06:20:17 - mmengine - INFO - Epoch(train)  [5][160/250]  lr: 1.1608e-06  eta: 0:10:49  time: 0.2526  data_time: 0.0079  memory: 1907  grad_norm: 3.0755  loss: 0.6736  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.6736
08/26 06:20:22 - mmengine - INFO - Epoch(train)  [5][180/250]  lr: 1.1806e-06  eta: 0:10:44  time: 0.2403  data_time: 0.0080  memory: 1907  grad_norm: 2.8761  loss: 0.6584  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6584
08/26 06:20:27 - mmengine - INFO - Epoch(train)  [5][200/250]  lr: 1.2005e-06  eta: 0:10:39  time: 0.2555  data_time: 0.0083  memory: 1907  grad_norm: 3.2018  loss: 0.6714  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.6714
08/26 06:20:32 - mmengine - INFO - Epoch(train)  [5][220/250]  lr: 1.2203e-06  eta: 0:10:34  time: 0.2546  data_time: 0.0079  memory: 1907  grad_norm: 3.2922  loss: 0.6712  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6712
08/26 06:20:37 - mmengine - INFO - Epoch(train)  [5][240/250]  lr: 1.2401e-06  eta: 0:10:28  time: 0.2334  data_time: 0.0074  memory: 1907  grad_norm: 3.1946  loss: 0.6566  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.6566
08/26 06:20:39 - mmengine - INFO - Exp name: stgcnpp_enhanced_fight_detection_stable_20250826_061456
08/26 06:20:39 - mmengine - INFO - Epoch(train)  [5][250/250]  lr: 1.2500e-06  eta: 0:10:26  time: 0.2304  data_time: 0.0071  memory: 1907  grad_norm: 3.3873  loss: 0.6566  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.6566
08/26 06:20:39 - mmengine - INFO - Saving checkpoint at 5 epochs
08/26 06:20:41 - mmengine - INFO - Epoch(val)  [5][20/72]    eta: 0:00:04  time: 0.0905  data_time: 0.0102  memory: 383  
08/26 06:20:43 - mmengine - INFO - Epoch(val)  [5][40/72]    eta: 0:00:02  time: 0.0868  data_time: 0.0075  memory: 383  
08/26 06:20:45 - mmengine - INFO - Epoch(val)  [5][60/72]    eta: 0:00:01  time: 0.0863  data_time: 0.0075  memory: 383  
08/26 06:20:46 - mmengine - INFO - Epoch(val) [5][72/72]    acc/top1: 0.7188  acc/mean1: 0.7141  data_time: 0.0080  time: 0.0869
08/26 06:20:51 - mmengine - INFO - Epoch(train)  [6][ 20/250]  lr: 1.2500e-06  eta: 0:10:20  time: 0.2361  data_time: 0.0109  memory: 1907  grad_norm: 3.0085  loss: 0.6620  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6620
08/26 06:20:56 - mmengine - INFO - Epoch(train)  [6][ 40/250]  lr: 1.2500e-06  eta: 0:10:15  time: 0.2507  data_time: 0.0072  memory: 1907  grad_norm: 2.9128  loss: 0.6577  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6577
08/26 06:21:01 - mmengine - INFO - Epoch(train)  [6][ 60/250]  lr: 1.2500e-06  eta: 0:10:10  time: 0.2503  data_time: 0.0078  memory: 1907  grad_norm: 3.0142  loss: 0.6674  top1_acc: 0.3125  top5_acc: 1.0000  loss_cls: 0.6674
08/26 06:21:05 - mmengine - INFO - Epoch(train)  [6][ 80/250]  lr: 1.2500e-06  eta: 0:10:05  time: 0.2381  data_time: 0.0078  memory: 1907  grad_norm: 3.1901  loss: 0.6586  top1_acc: 0.4375  top5_acc: 1.0000  loss_cls: 0.6586
08/26 06:21:10 - mmengine - INFO - Epoch(train)  [6][100/250]  lr: 1.2500e-06  eta: 0:10:00  time: 0.2508  data_time: 0.0072  memory: 1907  grad_norm: 2.8084  loss: 0.6632  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6632
08/26 06:21:15 - mmengine - INFO - Epoch(train)  [6][120/250]  lr: 1.2500e-06  eta: 0:09:55  time: 0.2499  data_time: 0.0073  memory: 1907  grad_norm: 3.1927  loss: 0.6358  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.6358
08/26 06:21:20 - mmengine - INFO - Epoch(train)  [6][140/250]  lr: 1.2500e-06  eta: 0:09:50  time: 0.2501  data_time: 0.0071  memory: 1907  grad_norm: 2.9669  loss: 0.6546  top1_acc: 0.8125  top5_acc: 1.0000  loss_cls: 0.6546
08/26 06:21:25 - mmengine - INFO - Epoch(train)  [6][160/250]  lr: 1.2500e-06  eta: 0:09:44  time: 0.2318  data_time: 0.0073  memory: 1907  grad_norm: 2.7380  loss: 0.6507  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6507
08/26 06:21:30 - mmengine - INFO - Epoch(train)  [6][180/250]  lr: 1.2500e-06  eta: 0:09:39  time: 0.2501  data_time: 0.0075  memory: 1907  grad_norm: 2.7818  loss: 0.6527  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6527
08/26 06:21:35 - mmengine - INFO - Epoch(train)  [6][200/250]  lr: 1.2500e-06  eta: 0:09:34  time: 0.2512  data_time: 0.0073  memory: 1907  grad_norm: 3.0795  loss: 0.6476  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6476
08/26 06:21:40 - mmengine - INFO - Epoch(train)  [6][220/250]  lr: 1.2500e-06  eta: 0:09:29  time: 0.2332  data_time: 0.0074  memory: 1907  grad_norm: 3.0841  loss: 0.6439  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.6439
08/26 06:21:45 - mmengine - INFO - Epoch(train)  [6][240/250]  lr: 1.2500e-06  eta: 0:09:24  time: 0.2511  data_time: 0.0072  memory: 1907  grad_norm: 2.8037  loss: 0.6584  top1_acc: 0.5000  top5_acc: 1.0000  loss_cls: 0.6584
08/26 06:21:47 - mmengine - INFO - Exp name: stgcnpp_enhanced_fight_detection_stable_20250826_061456
08/26 06:21:47 - mmengine - INFO - Epoch(train)  [6][250/250]  lr: 1.2500e-06  eta: 0:09:21  time: 0.2468  data_time: 0.0068  memory: 1907  grad_norm: 3.0355  loss: 0.6497  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.6497
08/26 06:21:49 - mmengine - INFO - Epoch(val)  [6][20/72]    eta: 0:00:04  time: 0.0918  data_time: 0.0105  memory: 383  
08/26 06:21:51 - mmengine - INFO - Epoch(val)  [6][40/72]    eta: 0:00:02  time: 0.0917  data_time: 0.0081  memory: 383  
08/26 06:21:53 - mmengine - INFO - Epoch(val)  [6][60/72]    eta: 0:00:01  time: 0.0866  data_time: 0.0082  memory: 383  
08/26 06:21:53 - mmengine - INFO - Epoch(val) [6][72/72]    acc/top1: 0.7065  acc/mean1: 0.6958  data_time: 0.0085  time: 0.0862
08/26 06:21:59 - mmengine - INFO - Epoch(train)  [7][ 20/250]  lr: 1.2194e-06  eta: 0:09:16  time: 0.2586  data_time: 0.0138  memory: 1907  grad_norm: 2.8518  loss: 0.6539  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.6539
08/26 06:22:04 - mmengine - INFO - Epoch(train)  [7][ 40/250]  lr: 1.2194e-06  eta: 0:09:11  time: 0.2559  data_time: 0.0078  memory: 1907  grad_norm: 3.0703  loss: 0.6483  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.6483
08/26 06:22:08 - mmengine - INFO - Epoch(train)  [7][ 60/250]  lr: 1.2194e-06  eta: 0:09:06  time: 0.2394  data_time: 0.0081  memory: 1907  grad_norm: 3.1019  loss: 0.6455  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6455
08/26 06:22:13 - mmengine - INFO - Epoch(train)  [7][ 80/250]  lr: 1.2194e-06  eta: 0:09:01  time: 0.2526  data_time: 0.0076  memory: 1907  grad_norm: 2.7730  loss: 0.6504  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 0.6504
