import os
from pathlib import Path

def remove_postfix(filename, extension):
    """ÌååÏùºÎ™ÖÏóêÏÑú ÌôïÏû•ÏûêÏôÄ postfixÎ•º Ï†úÍ±∞ÌïòÏó¨ Î≤†Ïù¥Ïä§Î™ÖÏùÑ ÏñªÏäµÎãàÎã§."""
    # ÌôïÏû•Ïûê Ï†úÍ±∞
    base_name = filename.replace(f'.{extension}', '')
    
    if extension == 'avi':
        # AVI ÌååÏùºÏóêÏÑú _rtmo_bytetrack_overlay Ï†úÍ±∞
        base_name = base_name.replace('_rtmo_bytetrack_overlay', '')
    elif extension == 'pkl':
        # PKL ÌååÏùºÏóêÏÑú _rtmo_bytetrack_pose Ï†úÍ±∞
        base_name = base_name.replace('_rtmo_bytetrack_pose', '')
    
    return base_name

def get_files_by_extension(folder_path, extension):
    """ÌäπÏ†ï ÌôïÏû•ÏûêÏùò ÌååÏùºÎì§ÏùÑ Í∞ÄÏ†∏ÏôÄÏÑú postfixÎ•º Ï†úÍ±∞Ìïú Î≤†Ïù¥Ïä§Î™ÖÏùÑ Î∞òÌôòÌï©ÎãàÎã§."""
    try:
        folder = Path(folder_path)
        if not folder.exists():
            print(f"Ìè¥ÎçîÍ∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§: {folder_path}")
            return set()
        
        files = set()
        for f in folder.glob(f"*.{extension}"):
            base_name = remove_postfix(f.name, extension)
            files.add(base_name)
        
        return files
    except Exception as e:
        print(f"Ìè¥Îçî ÏùΩÍ∏∞ Ïò§Î•ò ({folder_path}): {e}")
        return set()

def get_full_filenames_by_extension(folder_path, extension):
    """ÌäπÏ†ï ÌôïÏû•ÏûêÏùò Ï†ÑÏ≤¥ ÌååÏùºÎ™ÖÎì§Í≥º Î≤†Ïù¥Ïä§Î™Ö Îß§ÌïëÏùÑ Í∞ÄÏ†∏ÏòµÎãàÎã§."""
    try:
        folder = Path(folder_path)
        if not folder.exists():
            print(f"Ìè¥ÎçîÍ∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§: {folder_path}")
            return {}, []
        
        files = []
        basename_to_fullname = {}
        for f in folder.glob(f"*.{extension}"):
            base_name = remove_postfix(f.name, extension)
            files.append(f.name)
            basename_to_fullname[base_name] = f.name
        
        return basename_to_fullname, sorted(files)
    except Exception as e:
        print(f"Ìè¥Îçî ÏùΩÍ∏∞ Ïò§Î•ò ({folder_path}): {e}")
        return {}, []

def check_avi_pkl_mapping():
    # Ìè¥Îçî Í≤ΩÎ°ú ÏÑ§Ï†ï
    processed_folder = "/workspace/mmpose/output/RWF-2000/train/Fight"
    
    print("AVI-PKL ÌååÏùº Îß§Ìïë Í≤ÄÏÇ¨ ÏãúÏûë...")
    print(f"Í≤ÄÏÇ¨ Ìè¥Îçî: {processed_folder}")
    print("AVI postfix: _rtmo_bytetrack_overlay")
    print("PKL postfix: _rtmo_bytetrack_pose")
    print("-" * 80)
    
    # Í∞Å ÌôïÏû•ÏûêÎ≥Ñ ÌååÏùº Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞ (postfix Ï†úÍ±∞Ìïú Î≤†Ïù¥Ïä§Î™Ö)
    avi_basenames = get_files_by_extension(processed_folder, "avi")
    pkl_basenames = get_files_by_extension(processed_folder, "pkl")
    
    # Ï†ÑÏ≤¥ ÌååÏùºÎ™ÖÍ≥º Î≤†Ïù¥Ïä§Î™Ö Îß§ÌïëÎèÑ Í∞ÄÏ†∏Ïò§Í∏∞
    avi_mapping, avi_fullnames = get_full_filenames_by_extension(processed_folder, "avi")
    pkl_mapping, pkl_fullnames = get_full_filenames_by_extension(processed_folder, "pkl")
    
    print(f"AVI ÌååÏùº Í∞úÏàò: {len(avi_basenames)}")
    print(f"PKL ÌååÏùº Í∞úÏàò: {len(pkl_basenames)}")
    print("-" * 80)
    
    # Îß§Ìïë ÏïàÎêòÎäî ÌååÏùºÎì§ Ï∞æÍ∏∞
    avi_without_pkl = avi_basenames - pkl_basenames  # AVIÎäî ÏûàÎäîÎç∞ PKLÏù¥ ÏóÜÎäî Í≤É
    pkl_without_avi = pkl_basenames - avi_basenames  # PKLÏùÄ ÏûàÎäîÎç∞ AVIÍ∞Ä ÏóÜÎäî Í≤É
    
    # Í≤∞Í≥º Ï∂úÎ†•
    print("üìã Îß§Ìïë Í≤ÄÏÇ¨ Í≤∞Í≥º:")
    print("=" * 80)
    
    print(f"üîç AVIÎäî ÏûàÎäîÎç∞ PKLÏù¥ ÏóÜÎäî ÌååÏùºÎì§ ({len(avi_without_pkl)}Í∞ú):")
    if avi_without_pkl:
        for basename in sorted(avi_without_pkl):
            avi_file = avi_mapping.get(basename, f"{basename}_rtmo_bytetrack_overlay.avi")
            expected_pkl = f"{basename}_rtmo_bytetrack_pose.pkl"
            print(f"   - {avi_file}")
            print(f"     (ÎåÄÏùëÌïòÎäî {expected_pkl} ÏóÜÏùå)")
    else:
        print("   ‚úÖ ÏóÜÏùå (Î™®Îì† AVI ÌååÏùºÏóê ÎåÄÏùëÌïòÎäî PKL ÌååÏùº Ï°¥Ïû¨)")
    print()
    
    print(f"üîç PKLÏùÄ ÏûàÎäîÎç∞ AVIÍ∞Ä ÏóÜÎäî ÌååÏùºÎì§ ({len(pkl_without_avi)}Í∞ú):")
    if pkl_without_avi:
        for basename in sorted(pkl_without_avi):
            pkl_file = pkl_mapping.get(basename, f"{basename}_rtmo_bytetrack_pose.pkl")
            expected_avi = f"{basename}_rtmo_bytetrack_overlay.avi"
            print(f"   - {pkl_file}")
            print(f"     (ÎåÄÏùëÌïòÎäî {expected_avi} ÏóÜÏùå)")
    else:
        print("   ‚úÖ ÏóÜÏùå (Î™®Îì† PKL ÌååÏùºÏóê ÎåÄÏùëÌïòÎäî AVI ÌååÏùº Ï°¥Ïû¨)")
    print()
    
    # Îß§Ìïë ÌÜµÍ≥Ñ
    matched_files = avi_basenames & pkl_basenames
    print(f"üìä Îß§Ìïë ÌÜµÍ≥Ñ:")
    print(f"   ‚Ä¢ Ï†ïÏÉÅ Îß§ÌïëÎêú ÌååÏùº Ïåç: {len(matched_files)}Í∞ú")
    print(f"   ‚Ä¢ Îß§Ìïë ÏïàÎêú AVI ÌååÏùº: {len(avi_without_pkl)}Í∞ú")
    print(f"   ‚Ä¢ Îß§Ìïë ÏïàÎêú PKL ÌååÏùº: {len(pkl_without_avi)}Í∞ú")
    print(f"   ‚Ä¢ Ï†ÑÏ≤¥ AVI ÌååÏùº: {len(avi_basenames)}Í∞ú")
    print(f"   ‚Ä¢ Ï†ÑÏ≤¥ PKL ÌååÏùº: {len(pkl_basenames)}Í∞ú")
    print()
    
    # Îß§Ìïë ÏôÑÏÑ±ÎèÑ Í≥ÑÏÇ∞
    if len(avi_basenames) > 0:
        avi_mapping_rate = (len(matched_files) / len(avi_basenames)) * 100
        print(f"   ‚Ä¢ AVI‚ÜíPKL Îß§Ìïë ÏôÑÏÑ±ÎèÑ: {avi_mapping_rate:.1f}%")
    
    if len(pkl_basenames) > 0:
        pkl_mapping_rate = (len(matched_files) / len(pkl_basenames)) * 100
        print(f"   ‚Ä¢ PKL‚ÜíAVI Îß§Ìïë ÏôÑÏÑ±ÎèÑ: {pkl_mapping_rate:.1f}%")
    
    # ÏÉòÌîå Îß§Ìïë ÏòàÏãú Ï∂úÎ†•
    print("\nüîó Ï†ïÏÉÅ Îß§Ìïë ÏòàÏãú:")
    print("-" * 50)
    sample_count = 0
    for basename in sorted(matched_files):
        if sample_count >= 3:
            break
        avi_file = avi_mapping.get(basename, f"{basename}_rtmo_bytetrack_overlay.avi")
        pkl_file = pkl_mapping.get(basename, f"{basename}_rtmo_bytetrack_pose.pkl")
        print(f"   Î≤†Ïù¥Ïä§Î™Ö: {basename}")
        print(f"   ‚îú‚îÄ AVI: {avi_file}")
        print(f"   ‚îî‚îÄ PKL: {pkl_file}")
        print()
        sample_count += 1
    
    if len(matched_files) > 3:
        print(f"   ... (Ï¥ù {len(matched_files)}Í∞ú Îß§ÌïëÎêú Ïåç)")
    
    # Ï†ÑÏ≤¥ ÌååÏùºÎ™Ö ÏÉòÌîå Ï∂úÎ†•
    print("\nüìÅ Ï†ÑÏ≤¥ ÌååÏùº ÏòàÏãú:")
    print("-" * 50)
    print("AVI ÌååÏùº:")
    for i, filename in enumerate(avi_fullnames[:3]):
        base_name = remove_postfix(filename, 'avi')
        print(f"   {filename} ‚Üí Î≤†Ïù¥Ïä§Î™Ö: {base_name}")
    if len(avi_fullnames) > 3:
        print(f"   ... (Ï¥ù {len(avi_fullnames)}Í∞ú)")
    
    print("\nPKL ÌååÏùº:")
    for i, filename in enumerate(pkl_fullnames[:3]):
        base_name = remove_postfix(filename, 'pkl')
        print(f"   {filename} ‚Üí Î≤†Ïù¥Ïä§Î™Ö: {base_name}")
    if len(pkl_fullnames) > 3:
        print(f"   ... (Ï¥ù {len(pkl_fullnames)}Í∞ú)")

if __name__ == "__main__":
    check_avi_pkl_mapping()